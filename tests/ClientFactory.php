<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Tests;

use Core\Types\CallbackCatcher;
use GumletRestApisLib\Authentication\CustomHeaderAuthenticationCredentialsBuilder;
use GumletRestApisLib\GumletRestApisClient;
use GumletRestApisLib\GumletRestApisClientBuilder;

class ClientFactory
{
    public static function create(CallbackCatcher $httpCallback): GumletRestApisClient
    {
        $clientBuilder = GumletRestApisClientBuilder::init();
        $clientBuilder = self::addConfigurationFromEnvironment($clientBuilder);
        $clientBuilder = self::addTestConfiguration($clientBuilder);
        return $clientBuilder->httpCallback($httpCallback)->build();
    }

    public static function addTestConfiguration(GumletRestApisClientBuilder $builder): GumletRestApisClientBuilder
    {
        return $builder;
    }

    public static function addConfigurationFromEnvironment(
        GumletRestApisClientBuilder $builder
    ): GumletRestApisClientBuilder {
        $timeout = getenv('GUMLET_REST_APIS_LIB_TIMEOUT');
        $numberOfRetries = getenv('GUMLET_REST_APIS_LIB_NUMBER_OF_RETRIES');
        $maximumRetryWaitTime = getenv('GUMLET_REST_APIS_LIB_MAXIMUM_RETRY_WAIT_TIME');
        $environment = getenv('GUMLET_REST_APIS_LIB_ENVIRONMENT');
        $authorization = getenv('GUMLET_REST_APIS_LIB_AUTHORIZATION');

        if (!empty($timeout) && \is_numeric($timeout)) {
            $builder->timeout(intval($timeout));
        }

        if (!empty($numberOfRetries) && \is_numeric($numberOfRetries)) {
            $builder->numberOfRetries(intval($numberOfRetries));
        }

        if (!empty($maximumRetryWaitTime) && \is_numeric($maximumRetryWaitTime)) {
            $builder->maximumRetryWaitTime(intval($maximumRetryWaitTime));
        }

        if (!empty($environment)) {
            $builder->environment($environment);
        }

        if (!empty($authorization)) {
            $builder->customHeaderAuthenticationCredentials(
                CustomHeaderAuthenticationCredentialsBuilder::init($authorization)
            );
        }

        return $builder;
    }
}
