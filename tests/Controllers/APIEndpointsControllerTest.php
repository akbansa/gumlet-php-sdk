<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use GumletRestApisLib\Controllers\APIEndpointsController;
use GumletRestApisLib\Exceptions;
use GumletRestApisLib\Models;

class APIEndpointsControllerTest extends BaseTestController
{
    /**
     * @var APIEndpointsController APIEndpointsController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getAPIEndpointsController();
    }

    public function testListCollections()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->listCollections();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"all_sources\": [\n        {\n            \"id\": \"646df1c9173a4a2fca" .
                "c180b4\",\n            \"name\": \"collection_name\",\n            \"type\": \"" .
                "aws\",\n            \"created_at\": \"2023-05-24T11:15:21.624Z\",\n            " .
                "\"updated_at\": \"2024-01-24T11:57:48.744Z\",\n            \"video_protection\"" .
                ": {\n                \"signed_url\": true,\n                \"signed_url_secret" .
                "\": \"47a3e2fbb1318f033b882c632bc103a8\"\n            },\n            \"player_" .
                "config\": {\n                \"preload\": false,\n                \"autoplay\":" .
                " false,\n                \"disable_seek\": false,\n                \"disable_pl" .
                "ayer_controls\": false,\n                \"powered_by_gumlet_overlay\": false," .
                "\n                \"allow_drm_protected_videos\": false,\n                \"loo" .
                "p\": false,\n                \"player_color\": \"#6658ea\",\n                \"" .
                "include_seo\": true,\n                \"subtitle_enabled\": false,\n           " .
                "     \"pixel_tags\": {},\n                \"logo_width\": 100,\n               " .
                " \"logo_height\": 100,\n                \"dynamic_watermark\": false,\n        " .
                "        \"watermark_font_size\": 20,\n                \"watermark_font_color\":" .
                " \"#ff0000\",\n                \"watermark_bg_color\": \"transparent\",\n      " .
                "          \"watermark_interval\": 1000\n            },\n            \"default_p" .
                "rofile_id\": \"646df1c9173a4a2fcac180b7\",\n            \"insight_property_id\"" .
                ": \"646df0aa173a4a2fcac18009\",\n            \"aws\": {\n                \"buck" .
                "et_name\": \"asd\",\n                \"bucket_region\": \"ap-south-1\",\n      " .
                "          \"access_key\": \"Code@123\",\n                \"secret\": \"********" .
                "********\"\n            },\n            \"embed_details\": {\n                " .
                "\"pixel_tags\": {},\n                \"preload\": false,\n                \"aut" .
                "oplay\": false,\n                \"logo_width\": 100,\n                \"logo_h" .
                "eight\": 100,\n                \"player_color\": \"#6658ea\",\n                " .
                "\"is_seo\": true,\n                \"dynamic_watermark\": false,\n             " .
                "   \"disable_seek\": false,\n                \"disable_player_controls\": false" .
                ",\n                \"allow_drm_protected_videos\": false,\n                \"po" .
                "wered_by_gumlet_overlay\": false,\n                \"loop\": false,\n          " .
                "      \"subtitle_enabled\": false,\n                \"watermark_bg_color\": \"t" .
                "ransparent\",\n                \"watermark_font_color\": \"#ff0000\",\n        " .
                "        \"watermark_font_size\": 20,\n                \"watermark_interval\": 1" .
                "000\n            },\n            \"folders\": [\n                \"folder\",\n " .
                "               \"folder 2\",\n                \"folder 27\",\n                " .
                "\"folder 4\"\n            ],\n            \"channel_settings\": {\n            " .
                "    \"title\": \"my channel\",\n                \"active\": false,\n           " .
                "     \"description\": \"desc\",\n                \"privacy_type\": \"private\"," .
                "\n                \"custom_logo\": true,\n                \"logo_url\": \"https" .
                "://dev-video.gumlet.io/646df1c9172a4a2fcac180b4/channel/logo.png\",\n          " .
                "      \"cname\": [\n                    \"okj.com\",\n                    \"sd." .
                "com\",\n                    \"safd.com\"\n                ],\n                " .
                "\"temp_cname\": [\n                    \"okj.com\",\n                    \"safd" .
                ".com\",\n                    \"sd.com\"\n                ]\n            }\n    " .
                "    },\n        {\n            \"id\": \"65b016f4e99b77f116c0e381\",\n         " .
                "   \"name\": \"private uploads\",\n            \"type\": \"direct-upload\",\n  " .
                "          \"created_at\": \"2024-01-23T19:43:48.267Z\",\n            \"updated_" .
                "at\": \"2024-01-23T19:43:48.272Z\",\n            \"video_protection\": {},\n   " .
                "         \"player_config\": {\n                \"preload\": true,\n            " .
                "    \"autoplay\": false,\n                \"disable_seek\": false,\n           " .
                "     \"disable_player_controls\": false,\n                \"powered_by_gumlet_o" .
                "verlay\": true,\n                \"allow_drm_protected_videos\": true,\n       " .
                "         \"loop\": false,\n                \"player_color\": \"#6658ea\",\n    " .
                "            \"include_seo\": true,\n                \"subtitle_enabled\": false" .
                ",\n                \"pixel_tags\": {},\n                \"logo_width\": 100,\n " .
                "               \"logo_height\": 100,\n                \"dynamic_watermark\": fa" .
                "lse,\n                \"watermark_font_size\": 20,\n                \"watermark" .
                "_font_color\": \"#ff0000\",\n                \"watermark_bg_color\": \"transpar" .
                "ent\",\n                \"watermark_interval\": 1000\n            },\n         " .
                "   \"default_profile_id\": \"646df1c9173a4a2fcac180b7\",\n            \"insight" .
                "_property_id\": \"65b016f4e99b77f116c0e37f\",\n            \"embed_details\": {" .
                "\n                \"pixel_tags\": {},\n                \"powered_by_gumlet_over" .
                "lay\": true,\n                \"allow_drm_protected_videos\": true,\n          " .
                "      \"preload\": true,\n                \"autoplay\": false,\n               " .
                " \"logo_width\": 100,\n                \"logo_height\": 100,\n                " .
                "\"player_color\": \"#6658ea\",\n                \"is_seo\": true,\n            " .
                "    \"dynamic_watermark\": false,\n                \"watermark_font_size\": 20," .
                "\n                \"watermark_font_color\": \"#ff0000\",\n                \"wat" .
                "ermark_bg_color\": \"transparent\",\n                \"watermark_interval\": 10" .
                "00,\n                \"disable_seek\": false,\n                \"disable_player" .
                "_controls\": false,\n                \"loop\": false,\n                \"subtit" .
                "le_enabled\": false\n            },\n            \"folders\": [],\n            " .
                "\"channel_settings\": {\n                \"active\": false,\n                \"" .
                "privacy_type\": \"private\"\n            }\n        }\n    ]\n}"
            )))
            ->assert();
    }

    public function testCreateCollection()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createCollection($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"id\": \"65b01610e99b77f116c0e32b\",\n    \"name\": \"zoom-collection" .
                "\",\n    \"type\": \"zoom\",\n    \"created_at\": \"2024-01-23T19:40:00.447Z\"," .
                "\n    \"updated_at\": \"2024-01-23T19:40:00.447Z\",\n    \"video_protection\": " .
                "{},\n    \"player_config\": {\n        \"preload\": true,\n        \"autoplay\"" .
                ": false,\n        \"disable_seek\": false,\n        \"disable_player_controls\"" .
                ": false,\n        \"powered_by_gumlet_overlay\": true,\n        \"allow_drm_pro" .
                "tected_videos\": true,\n        \"loop\": false,\n        \"player_color\": \"#" .
                "6658ea\",\n        \"include_seo\": true,\n        \"subtitle_enabled\": false," .
                "\n        \"pixel_tags\": {},\n        \"logo_width\": 100,\n        \"logo_hei" .
                "ght\": 100,\n        \"dynamic_watermark\": false,\n        \"watermark_font_si" .
                "ze\": 20,\n        \"watermark_font_color\": \"#ff0000\",\n        \"watermark_" .
                "bg_color\": \"transparent\",\n        \"watermark_interval\": 1000\n    },\n   " .
                " \"default_profile_id\": \"646df1c9173a4a2fcac180b7\",\n    \"insight_property_" .
                "id\": \"65b01610e99b77f116c0e329\",\n    \"zoom\": {\n        \"secret\": \"you" .
                "rSecret\"\n    },\n    \"embed_details\": {\n        \"powered_by_gumlet_overla" .
                "y\": true,\n        \"allow_drm_protected_videos\": true,\n        \"preload\":" .
                " true,\n        \"autoplay\": false,\n        \"logo_width\": 100,\n        \"l" .
                "ogo_height\": 100,\n        \"player_color\": \"#6658ea\",\n        \"is_seo\":" .
                " true,\n        \"dynamic_watermark\": false,\n        \"watermark_font_size\":" .
                " 20,\n        \"watermark_font_color\": \"#ff0000\",\n        \"watermark_bg_co" .
                "lor\": \"transparent\",\n        \"watermark_interval\": 1000,\n        \"disab" .
                "le_seek\": false,\n        \"disable_player_controls\": false,\n        \"loop" .
                "\": false,\n        \"subtitle_enabled\": false\n    },\n    \"folders\": [],\n" .
                "    \"channel_settings\": {\n        \"active\": false,\n        \"privacy_type" .
                "\": \"private\"\n    }\n}"
            )))
            ->assert();
    }

    public function testCreateAsset()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createAsset($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"asset_id\": \"65b168a6e99b77f116c0e488\",\n    \"progress\": 0,\n    " .
                "\"created_at\": 1706125479006,\n    \"updated_at\": 1706125479006,\n    \"statu" .
                "s\": \"pre-queued\",\n    \"tag\": [\n        \"ball\"\n    ],\n    \"source_id" .
                "\": \"646df1c9173a4a2fcac180b4\",\n    \"collection_id\": \"646df1c9173a4a2fcac" .
                "180b4\",\n    \"input\": {\n        \"transformations\": {\n            \"forma" .
                "t\": \"hls\",\n            \"resolution\": [\n                \"360p\",\n      " .
                "          \"480p\",\n                \"540p\",\n                \"720p\",\n    " .
                "            \"1080p\"\n            ],\n            \"audio_codec\": [\n        " .
                "        \"aac\"\n            ],\n            \"video_codec\": [\n              " .
                "  \"libx264\"\n            ],\n            \"thumbnail\": [\n                \"" .
                "auto\"\n            ],\n            \"thumbnail_format\": \"png\",\n           " .
                " \"mp4_access\": false,\n            \"per_title_encoding\": false\n        }," .
                "\n        \"profile_id\": \"646df1c9173a4a2fcac180b7\",\n        \"title\": \"b" .
                "ipbopall\",\n        \"description\": \"some description\",\n        \"metadata" .
                "\": {\n            \"headermeta\": \"metavalue\"\n        },\n        \"source_" .
                "url\": \"http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8\",\n  " .
                "      \"call_to_actions\": [\n            {\n                \"start_time\": 1," .
                "\n                \"end_time\": 90,\n                \"text\": \"some test\",\n" .
                "                \"url\": \"https://some-url.com\",\n                \"position_" .
                "from_top\": 11,\n                \"position_from_right\": 23,\n                " .
                "\"border_radius\": 11,\n                \"font_color\": \"#000001\",\n         " .
                "       \"background_color\": \"#ffffff\",\n                \"html_target\": \"_" .
                "blank\"\n            }\n        ]\n    },\n    \"output\": {\n        \"format" .
                "\": \"hls\",\n        \"status_url\": \"https://api.gumlet.com/v1/video/assets/" .
                "65b168a6e99b77f116c0e488\",\n        \"playback_url\": \"https://video.gumlet.i" .
                "o/646df1c9173a4a2fcac180b4/65b168a6e99b77f116c0e488/main.m3u8\",\n        \"thu" .
                "mbnail_url\": [\n            \"https://video.gumlet.io/646df1c9173a4a2fcac180b4" .
                "/65b168a6e99b77f116c0e488/thumbnail-1-0.png?v=1706125479006\"\n        ]\n    }" .
                ",\n    \"playlists\": [\n        \"6597acd5ed6f26a9c5ca9633\"\n    ]\n}"
            )))
            ->assert();
    }

    public function testCreateAssetDirectUpload()
    {
        // Parameters for the API call
        $body = TestParam::object(
            '{"collection_id":"646df1c9173a4a2fcac180b4","title":"Sports.","description":"This ' .
            'video provides information about various sports.","format":"MP4","tag":["games","fi' .
            'eld"],"profile_id":"646df1c9173a4a2fcac180b7","cluster_type":"prod","input":"https:' .
            '//file-examples.com/wp-content/storage/2017/04/file_example_MP4_480_1_5MG.mp4","pla' .
            'ylist_id":"6597acd5ed6f26a9c5ca9633","metadata":"{\\"headermeta\\":\\"metavalue\\"}' .
            '","call_to_actions":[{"start_time":1,"end_time":90,"text":"Buy here!!","url":"https' .
            '://some-buy-url-site.com","position_from_top":11,"position_from_right":"23","border' .
            '_radius":"11","font_color":"#000001","background_color":"#ffffff"}]}',
            Models\VideoAssetsUploadRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createAssetDirectUpload($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"asset_id\": \"65b169dfe99b77f116c0e4aa\",\n    \"progress\": 0,\n    " .
                "\"created_at\": 1706125793055,\n    \"updated_at\": 1706125793055,\n    \"statu" .
                "s\": \"upload-pending\",\n    \"tag\": [\n        \"games\",\n        \"field\"" .
                "\n    ],\n    \"source_id\": \"646df1c9173a4a2fcac180b4\",\n    \"collection_id" .
                "\": \"646df1c9173a4a2fcac180b4\",\n    \"input\": {\n        \"transformations" .
                "\": {\n            \"format\": \"hls\",\n            \"resolution\": [\n       " .
                "         \"360p\",\n                \"480p\",\n                \"540p\",\n     " .
                "           \"720p\",\n                \"1080p\"\n            ],\n            \"" .
                "audio_codec\": [\n                \"aac\"\n            ],\n            \"video_" .
                "codec\": [\n                \"libx264\"\n            ],\n            \"thumbnai" .
                "l\": [\n                \"auto\"\n            ],\n            \"thumbnail_forma" .
                "t\": \"png\",\n            \"mp4_access\": false,\n            \"per_title_enco" .
                "ding\": false,\n            \"original_deleted\": true\n        },\n        \"p" .
                "rofile_id\": \"646df1c9173a4a2fcac180b7\",\n        \"title\": \"Sports.\",\n  " .
                "      \"description\": \"This video provides information about various sports." .
                "\",\n        \"metadata\": {\n            \"headermeta\": \"metavalue\"\n      " .
                "  },\n        \"source_url\": \"646df1c9173a4a2fcac180b4/65b169dfe99b77f116c0e4" .
                "aa/origin-65b169dfe99b77f116c0e4aa\",\n        \"call_to_actions\": [\n        " .
                "    {\n                \"start_time\": 1,\n                \"end_time\": 90,\n " .
                "               \"text\": \"Buy here!!\",\n                \"url\": \"https://so" .
                "me-buy-url-site.com\",\n                \"html_target\": \"_blank\"\n          " .
                "  }\n        ]\n    },\n    \"output\": {\n        \"format\": \"hls\",\n      " .
                "  \"status_url\": \"https://api.gumlet.com/v1/video/assets/65b169dfe99b77f116c0" .
                "e4aa\",\n        \"playback_url\": \"https://dev-video.gumlet.io/646df1c9173a4a" .
                "2fcac180b4/65b169dfe99b77f116c0e4aa/main.m3u8\",\n        \"thumbnail_url\": [" .
                "\n            \"https://dev-video.gumlet.io/646df1c9173a4a2fcac180b4/65b169dfe9" .
                "9b77f116c0e4aa/thumbnail-1-0.png?v=1706125793055\"\n        ]\n    },\n    \"up" .
                "load_url\": \"https://gumlet-video-user-uploads.s3-accelerate.dualstack.amazona" .
                "ws.com/gumlet-user-uploads-dev-deletable/646df1c9173a4a2fcac180b4/65b169dfe99b7" .
                "7f116c0e4aa/origin-65b169dfe99b77f116c0e4aa?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-" .
                "Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA4WNLTXWDAC3AKBPV%2F202" .
                "40124%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240124T194953Z&X-Amz-Expires" .
                "=3600&X-Amz-Signature=b724bd728efd589ec6cb4d0fab17947448c02788823619433720e8fdd" .
                "f0f1155&X-Amz-SignedHeaders=host&x-id=PutObject\",\n    \"playlists\": [\n     " .
                "   \"6597acd5ed6f26a9c5ca9633\"\n    ]\n}"
            )))
            ->assert();
    }

    public function testUpdateAsset()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->updateAsset($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object('{}')))
            ->assert();
    }

    public function testVideoAnalytics()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->videoAnalytics($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n  \"top_assets\": [\n    {\n        \"collection_id\": \"<COLLECTION_ID>\"," .
                "\n        \"asset_id\": \"<ASSET_ID>\",\n        \"units\": 162870,\n        \"" .
                "collection_name\": \"<COLLECTION_NAME>\"\n    },\n    {\n        \"collection_i" .
                "d\": \"<COLLECTION_ID>\",\n        \"asset_id\": \"<ASSET_ID>\",\n        \"uni" .
                "ts\": 21348,\n        \"collection_name\": \"<COLLECTION_NAME>\"\n    },\n    {" .
                "\n        \"collection_id\": \"<COLLECTION_ID>\",\n        \"asset_id\": \"<ASS" .
                "ET_ID>\",\n        \"units\": 1239,\n        \"collection_name\": \"<COLLECTION" .
                "_NAME>\"\n    },\n    {\n        \"collection_id\": \"<COLLECTION_ID>\",\n     " .
                "   \"asset_id\": \"<ASSET_ID>\",\n        \"units\": 974,\n        \"collection" .
                "_name\": \"<COLLECTION_NAME>\"\n    },\n    {\n        \"collection_id\": \"<CO" .
                "LLECTION_ID>\",\n        \"asset_id\": \"<ASSET_ID>\",\n        \"units\": 124," .
                "\n        \"collection_name\": \"<COLLECTION_NAME>\"\n    }\n  ]\n}"
            )))
            ->assert();
    }

    public function testCreateProfile()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createProfile($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n  \"profile_id\": \"61921fb10822a81d955d1730\",\n  \"name\": \"Gumlet-Profi" .
                "le-1\",\n  \"transformations\": {\n    \"format\": \"hls\",\n    \"audio_codec" .
                "\": [\n      \"aac\"\n    ],\n    \"video_codec\": [\n      \"libx264\"\n    ]," .
                "\n    \"thumbnail\": [\n      \"auto\"\n    ],\n    \"thumbnail_format\": \"png" .
                "\",\n    \"mp4_access\": false,\n    \"per_title_encoding\": true\n  },\n  \"cr" .
                "eated_at\": 1636966321742\n}"
            )))
            ->assert();
    }

    public function testCreatePlaylist()
    {
        // Parameters for the API call
        $body = TestParam::object(
            '{"title":"Playlist-Title","description":"This is description for playlist.","colle' .
            'ction_id":"{{video-source-id}}"}',
            Models\VideoPlaylistRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createPlaylist($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"id\": \"659693cadc46251d898930f2\",\n    \"collection_id\": \"646df1c" .
                "9173a4a2fcac180b4\",\n    \"title\": \"Playlist-Title\",\n    \"description\": " .
                "\"This is description for playlist.\",\n    \"player_config\": {\n        \"pre" .
                "load\": false,\n        \"autoplay\": false,\n        \"disable_seek\": false," .
                "\n        \"disable_player_controls\": false,\n        \"powered_by_gumlet_over" .
                "lay\": false,\n        \"allow_drm_protected_videos\": false,\n        \"loop\"" .
                ": false,\n        \"player_color\": \"#6658ea\",\n        \"include_seo\": true" .
                ",\n        \"subtitle_enabled\": false,\n        \"pixel_tags\": {},\n        " .
                "\"logo_width\": 100,\n        \"logo_height\": 100,\n        \"dynamic_watermar" .
                "k\": false,\n        \"watermark_font_size\": 20,\n        \"watermark_font_col" .
                "or\": \"#ff0000\",\n        \"watermark_bg_color\": \"transparent\",\n        " .
                "\"watermark_interval\": 1000\n    }\n}"
            )))
            ->assert();
    }

    public function testGetAllPlaylists()
    {
        // Parameters for the API call
        $collectionId = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->getAllPlaylists($collectionId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "[\n    {\n        \"id\": \"6566ebd57499c676fe302bfc\",\n        \"collection_" .
                "id\": \"646df1c9173a4a2fcac180b4\",\n        \"title\": \"Playlist-1\",\n      " .
                "  \"description\": \"This is updated description\",\n        \"player_config\":" .
                " {}\n    },\n    {\n        \"id\": \"65802cc5bda4c3f74c99eacf\",\n        \"co" .
                "llection_id\": \"646df1c9173a4a2fcac180b4\",\n        \"title\": \"Playlist-2\"" .
                ",\n        \"player_config\": {}\n    },\n    {\n        \"id\": \"65802cc6bda4" .
                "c3f74c99eae5\",\n        \"collection_id\": \"646df1c9173a4a2fcac180b4\",\n    " .
                "    \"title\": \"Playlist-3\",\n        \"player_config\": {}\n    }\n]"
            )))
            ->assert();
    }

    public function testCreateWebhook()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createWebhook($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"id\": \"65eed75eadeea8478f14ebd4\",\n    \"url\": \"https://webhook.s" .
                "ite/16df065a-b398-48bc-b825-b0804979c5f1\",\n    \"triggers\": [\n        \"sta" .
                "tus\"\n    ],\n    \"created_at\": \"2024-03-11T10:05:18.316Z\",\n    \"updated" .
                "_at\": \"2024-03-11T10:05:18.316Z\",\n    \"sources\": [\n        \"5f462c1561c" .
                "f8a766464ffc4\"\n    ],\n    \"secret_token\": \"rnVNfIKgnH\"\n}"
            )))
            ->assert();
    }

    public function testInsightsChartData()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->insightsChartData($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"views\": [\n        {\n            \"x\": 1647475200000,\n           " .
                " \"y\": null,\n            \"unit\": \"views\"\n        },\n        {\n        " .
                "    \"x\": 1647561600000,\n            \"y\": null,\n            \"unit\": \"vi" .
                "ews\"\n        },\n        {\n            \"x\": 1647648000000,\n            \"" .
                "y\": 6,\n            \"unit\": \"views\"\n        },\n        {\n            \"" .
                "x\": 1647734400000,\n            \"y\": 24,\n            \"unit\": \"views\"\n " .
                "       },\n        {\n            \"x\": 1647820800000,\n            \"y\": 33," .
                "\n            \"unit\": \"views\"\n        },\n        {\n            \"x\": 16" .
                "47907200000,\n            \"y\": 16,\n            \"unit\": \"views\"\n        " .
                "}\n    ],\n    \"unique_views\": [\n        {\n            \"x\": 1647475200000" .
                ",\n            \"y\": null,\n            \"unit\": \"users\"\n        },\n     " .
                "   {\n            \"x\": 1647561600000,\n            \"y\": null,\n            " .
                "\"unit\": \"users\"\n        },\n        {\n            \"x\": 1647648000000,\n" .
                "            \"y\": 1,\n            \"unit\": \"users\"\n        },\n        {\n" .
                "            \"x\": 1647734400000,\n            \"y\": 1,\n            \"unit\":" .
                " \"users\"\n        },\n        {\n            \"x\": 1647820800000,\n         " .
                "   \"y\": 1,\n            \"unit\": \"users\"\n        },\n        {\n         " .
                "   \"x\": 1647907200000,\n            \"y\": 1,\n            \"unit\": \"users" .
                "\"\n        }\n    ]\n}"
            )))
            ->assert();
    }

    public function testInsightsBreakdownData()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->insightsBreakdownData($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"views\": {\n        \"data\": [\n            {\n                \"key" .
                "\": \"com.reactnativesdkdev\",\n                \"value\": 79,\n               " .
                " \"unit\": \"views\"\n            }\n        ],\n        \"has_next_page\": fal" .
                "se,\n        \"current_page\": 1\n    }\n}"
            )))
            ->assert();
    }

    public function testInsightsAggregatedData()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->insightsAggregatedData($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object(
                    "{\n    \"views\": {\n        \"sum\": {\n            \"value\": 79,\n     " .
                    "       \"unit\": \"views\"\n        }\n    }\n}"
                )
            ))
            ->assert();
    }

    public function testCreateImageSource()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createImageSource($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"id\": \"65b01610e99b77f116c0e32b\",\n    \"name\": \"zoom-collection" .
                "\",\n    \"type\": \"zoom\",\n    \"created_at\": \"2024-01-23T19:40:00.447Z\"," .
                "\n    \"updated_at\": \"2024-01-23T19:40:00.447Z\",\n    \"video_protection\": " .
                "{},\n    \"player_config\": {\n        \"preload\": true,\n        \"autoplay\"" .
                ": false,\n        \"disable_seek\": false,\n        \"disable_player_controls\"" .
                ": false,\n        \"powered_by_gumlet_overlay\": true,\n        \"allow_drm_pro" .
                "tected_videos\": true,\n        \"loop\": false,\n        \"player_color\": \"#" .
                "6658ea\",\n        \"include_seo\": true,\n        \"subtitle_enabled\": false," .
                "\n        \"pixel_tags\": {},\n        \"logo_width\": 100,\n        \"logo_hei" .
                "ght\": 100,\n        \"dynamic_watermark\": false,\n        \"watermark_font_si" .
                "ze\": 20,\n        \"watermark_font_color\": \"#ff0000\",\n        \"watermark_" .
                "bg_color\": \"transparent\",\n        \"watermark_interval\": 1000\n    },\n   " .
                " \"default_profile_id\": \"646df1c9173a4a2fcac180b7\",\n    \"insight_property_" .
                "id\": \"65b01610e99b77f116c0e329\",\n    \"zoom\": {\n        \"secret\": \"you" .
                "rSecret\"\n    },\n    \"embed_details\": {\n        \"powered_by_gumlet_overla" .
                "y\": true,\n        \"allow_drm_protected_videos\": true,\n        \"preload\":" .
                " true,\n        \"autoplay\": false,\n        \"logo_width\": 100,\n        \"l" .
                "ogo_height\": 100,\n        \"player_color\": \"#6658ea\",\n        \"is_seo\":" .
                " true,\n        \"dynamic_watermark\": false,\n        \"watermark_font_size\":" .
                " 20,\n        \"watermark_font_color\": \"#ff0000\",\n        \"watermark_bg_co" .
                "lor\": \"transparent\",\n        \"watermark_interval\": 1000,\n        \"disab" .
                "le_seek\": false,\n        \"disable_player_controls\": false,\n        \"loop" .
                "\": false,\n        \"subtitle_enabled\": false\n    },\n    \"folders\": [],\n" .
                "    \"channel_settings\": {\n        \"active\": false,\n        \"privacy_type" .
                "\": \"private\"\n    }\n}"
            )))
            ->assert();
    }

    public function testListSources()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->listSources();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n    \"all_sources\": [\n        {\n            \"id\": \"646df1c9173a4a2fca" .
                "c180b4\",\n            \"name\": \"collection_name\",\n            \"type\": \"" .
                "aws\",\n            \"created_at\": \"2023-05-24T11:15:21.624Z\",\n            " .
                "\"updated_at\": \"2024-01-24T11:57:48.744Z\",\n            \"video_protection\"" .
                ": {\n                \"signed_url\": true,\n                \"signed_url_secret" .
                "\": \"47a3e2fbb1318f033b882c632bc103a8\"\n            },\n            \"player_" .
                "config\": {\n                \"preload\": false,\n                \"autoplay\":" .
                " false,\n                \"disable_seek\": false,\n                \"disable_pl" .
                "ayer_controls\": false,\n                \"powered_by_gumlet_overlay\": false," .
                "\n                \"allow_drm_protected_videos\": false,\n                \"loo" .
                "p\": false,\n                \"player_color\": \"#6658ea\",\n                \"" .
                "include_seo\": true,\n                \"subtitle_enabled\": false,\n           " .
                "     \"pixel_tags\": {},\n                \"logo_width\": 100,\n               " .
                " \"logo_height\": 100,\n                \"dynamic_watermark\": false,\n        " .
                "        \"watermark_font_size\": 20,\n                \"watermark_font_color\":" .
                " \"#ff0000\",\n                \"watermark_bg_color\": \"transparent\",\n      " .
                "          \"watermark_interval\": 1000\n            },\n            \"default_p" .
                "rofile_id\": \"646df1c9173a4a2fcac180b7\",\n            \"insight_property_id\"" .
                ": \"646df0aa173a4a2fcac18009\",\n            \"aws\": {\n                \"buck" .
                "et_name\": \"asd\",\n                \"bucket_region\": \"ap-south-1\",\n      " .
                "          \"access_key\": \"Code@123\",\n                \"secret\": \"********" .
                "********\"\n            },\n            \"embed_details\": {\n                " .
                "\"pixel_tags\": {},\n                \"preload\": false,\n                \"aut" .
                "oplay\": false,\n                \"logo_width\": 100,\n                \"logo_h" .
                "eight\": 100,\n                \"player_color\": \"#6658ea\",\n                " .
                "\"is_seo\": true,\n                \"dynamic_watermark\": false,\n             " .
                "   \"disable_seek\": false,\n                \"disable_player_controls\": false" .
                ",\n                \"allow_drm_protected_videos\": false,\n                \"po" .
                "wered_by_gumlet_overlay\": false,\n                \"loop\": false,\n          " .
                "      \"subtitle_enabled\": false,\n                \"watermark_bg_color\": \"t" .
                "ransparent\",\n                \"watermark_font_color\": \"#ff0000\",\n        " .
                "        \"watermark_font_size\": 20,\n                \"watermark_interval\": 1" .
                "000\n            },\n            \"folders\": [\n                \"folder\",\n " .
                "               \"folder 2\",\n                \"folder 27\",\n                " .
                "\"folder 4\"\n            ],\n            \"channel_settings\": {\n            " .
                "    \"title\": \"my channel\",\n                \"active\": false,\n           " .
                "     \"description\": \"desc\",\n                \"privacy_type\": \"private\"," .
                "\n                \"custom_logo\": true,\n                \"logo_url\": \"https" .
                "://dev-video.gumlet.io/646df1c9172a4a2fcac180b4/channel/logo.png\",\n          " .
                "      \"cname\": [\n                    \"okj.com\",\n                    \"sd." .
                "com\",\n                    \"safd.com\"\n                ],\n                " .
                "\"temp_cname\": [\n                    \"okj.com\",\n                    \"safd" .
                ".com\",\n                    \"sd.com\"\n                ]\n            }\n    " .
                "    },\n        {\n            \"id\": \"65b016f4e99b77f116c0e381\",\n         " .
                "   \"name\": \"private uploads\",\n            \"type\": \"direct-upload\",\n  " .
                "          \"created_at\": \"2024-01-23T19:43:48.267Z\",\n            \"updated_" .
                "at\": \"2024-01-23T19:43:48.272Z\",\n            \"video_protection\": {},\n   " .
                "         \"player_config\": {\n                \"preload\": true,\n            " .
                "    \"autoplay\": false,\n                \"disable_seek\": false,\n           " .
                "     \"disable_player_controls\": false,\n                \"powered_by_gumlet_o" .
                "verlay\": true,\n                \"allow_drm_protected_videos\": true,\n       " .
                "         \"loop\": false,\n                \"player_color\": \"#6658ea\",\n    " .
                "            \"include_seo\": true,\n                \"subtitle_enabled\": false" .
                ",\n                \"pixel_tags\": {},\n                \"logo_width\": 100,\n " .
                "               \"logo_height\": 100,\n                \"dynamic_watermark\": fa" .
                "lse,\n                \"watermark_font_size\": 20,\n                \"watermark" .
                "_font_color\": \"#ff0000\",\n                \"watermark_bg_color\": \"transpar" .
                "ent\",\n                \"watermark_interval\": 1000\n            },\n         " .
                "   \"default_profile_id\": \"646df1c9173a4a2fcac180b7\",\n            \"insight" .
                "_property_id\": \"65b016f4e99b77f116c0e37f\",\n            \"embed_details\": {" .
                "\n                \"pixel_tags\": {},\n                \"powered_by_gumlet_over" .
                "lay\": true,\n                \"allow_drm_protected_videos\": true,\n          " .
                "      \"preload\": true,\n                \"autoplay\": false,\n               " .
                " \"logo_width\": 100,\n                \"logo_height\": 100,\n                " .
                "\"player_color\": \"#6658ea\",\n                \"is_seo\": true,\n            " .
                "    \"dynamic_watermark\": false,\n                \"watermark_font_size\": 20," .
                "\n                \"watermark_font_color\": \"#ff0000\",\n                \"wat" .
                "ermark_bg_color\": \"transparent\",\n                \"watermark_interval\": 10" .
                "00,\n                \"disable_seek\": false,\n                \"disable_player" .
                "_controls\": false,\n                \"loop\": false,\n                \"subtit" .
                "le_enabled\": false\n            },\n            \"folders\": [],\n            " .
                "\"channel_settings\": {\n                \"active\": false,\n                \"" .
                "privacy_type\": \"private\"\n            }\n        }\n    ]\n}"
            )))
            ->assert();
    }

    public function testImageAnalytics()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->imageAnalytics($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n  \"top_assets\": [\n    {\n        \"collection_id\": \"<COLLECTION_ID>\"," .
                "\n        \"asset_id\": \"<ASSET_ID>\",\n        \"units\": 162870,\n        \"" .
                "collection_name\": \"<COLLECTION_NAME>\"\n    },\n    {\n        \"collection_i" .
                "d\": \"<COLLECTION_ID>\",\n        \"asset_id\": \"<ASSET_ID>\",\n        \"uni" .
                "ts\": 21348,\n        \"collection_name\": \"<COLLECTION_NAME>\"\n    },\n    {" .
                "\n        \"collection_id\": \"<COLLECTION_ID>\",\n        \"asset_id\": \"<ASS" .
                "ET_ID>\",\n        \"units\": 1239,\n        \"collection_name\": \"<COLLECTION" .
                "_NAME>\"\n    },\n    {\n        \"collection_id\": \"<COLLECTION_ID>\",\n     " .
                "   \"asset_id\": \"<ASSET_ID>\",\n        \"units\": 974,\n        \"collection" .
                "_name\": \"<COLLECTION_NAME>\"\n    },\n    {\n        \"collection_id\": \"<CO" .
                "LLECTION_ID>\",\n        \"asset_id\": \"<ASSET_ID>\",\n        \"units\": 124," .
                "\n        \"collection_name\": \"<COLLECTION_NAME>\"\n    }\n  ]\n}"
            )))
            ->assert();
    }

    public function testCreateLiveAsset()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createLiveAsset($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n  \"status\": \"created\",\n  \"stream_key\": \"619231610822a81d955d22f4\"," .
                "\n  \"live_asset_id\": \"619231610822a81d955d22f3\",\n  \"live_video_source_id" .
                "\": \"6165247368d80232d28d4379\",\n  \"input\": {\n    \"resolution\": [\n     " .
                " \"720p\"\n    ]\n  },\n  \"stream_url\": \"rtmp://livestream-ingest.gumlet.io:" .
                "1935/app/619231610822a81d955d22f4\",\n  \"output\": {\n    \"playback_url\": \"" .
                "https://video.gumlet.io/6165247368d80232d28d4379/619231610822a81d955d22f3/maste" .
                "r.m3u8\"\n  },\n  \"created_at\": 1636970849188,\n  \"updated_at\": 16369708491" .
                "88\n}"
            )))
            ->assert();
    }

    public function testCreateLiveAssetCopy()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createLiveAssetCopy($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\n  \"status\": \"created\",\n  \"stream_key\": \"619231610822a81d955d22f4\"," .
                "\n  \"live_asset_id\": \"619231610822a81d955d22f3\",\n  \"live_video_source_id" .
                "\": \"6165247368d80232d28d4379\",\n  \"input\": {\n    \"resolution\": [\n     " .
                " \"720p\"\n    ]\n  },\n  \"stream_url\": \"rtmp://livestream-ingest.gumlet.io:" .
                "1935/app/619231610822a81d955d22f4\",\n  \"output\": {\n    \"playback_url\": \"" .
                "https://video.gumlet.io/6165247368d80232d28d4379/619231610822a81d955d22f3/maste" .
                "r.m3u8\"\n  },\n  \"created_at\": 1636970849188,\n  \"updated_at\": 16369708491" .
                "88\n}"
            )))
            ->assert();
    }
}
