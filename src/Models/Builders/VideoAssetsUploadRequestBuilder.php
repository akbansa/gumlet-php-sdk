<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models\Builders;

use Core\Utils\CoreHelper;
use GumletRestApisLib\Models\AnimatedGif;
use GumletRestApisLib\Models\CallToAction;
use GumletRestApisLib\Models\Crop;
use GumletRestApisLib\Models\GenerateSubtitles;
use GumletRestApisLib\Models\ImageOverlay;
use GumletRestApisLib\Models\Pad;
use GumletRestApisLib\Models\TextOverlay;
use GumletRestApisLib\Models\Trim;
use GumletRestApisLib\Models\VideoAssetsUploadRequest;

/**
 * Builder for model VideoAssetsUploadRequest
 *
 * @see VideoAssetsUploadRequest
 */
class VideoAssetsUploadRequestBuilder
{
    /**
     * @var VideoAssetsUploadRequest
     */
    private $instance;

    private function __construct(VideoAssetsUploadRequest $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new Video Assets Upload Request Builder object.
     *
     * @param string $collectionId
     * @param string $format
     */
    public static function init(string $collectionId, string $format): self
    {
        return new self(new VideoAssetsUploadRequest($collectionId, $format));
    }

    /**
     * Sets profile id field.
     *
     * @param string|null $value
     */
    public function profileId(?string $value): self
    {
        $this->instance->setProfileId($value);
        return $this;
    }

    /**
     * Sets tag field.
     *
     * @param string[]|null $value
     */
    public function tag(?array $value): self
    {
        $this->instance->setTag($value);
        return $this;
    }

    /**
     * Sets title field.
     *
     * @param string|null $value
     */
    public function title(?string $value): self
    {
        $this->instance->setTitle($value);
        return $this;
    }

    /**
     * Sets description field.
     *
     * @param string|null $value
     */
    public function description(?string $value): self
    {
        $this->instance->setDescription($value);
        return $this;
    }

    /**
     * Sets playlist id field.
     *
     * @param string|null $value
     */
    public function playlistId(?string $value): self
    {
        $this->instance->setPlaylistId($value);
        return $this;
    }

    /**
     * Sets metadata field.
     *
     * @param string|null $value
     */
    public function metadata(?string $value): self
    {
        $this->instance->setMetadata($value);
        return $this;
    }

    /**
     * Sets call to actions field.
     *
     * @param CallToAction[]|null $value
     */
    public function callToActions(?array $value): self
    {
        $this->instance->setCallToActions($value);
        return $this;
    }

    /**
     * Sets width field.
     *
     * @param string|null $value
     */
    public function width(?string $value): self
    {
        $this->instance->setWidth($value);
        return $this;
    }

    /**
     * Sets height field.
     *
     * @param string|null $value
     */
    public function height(?string $value): self
    {
        $this->instance->setHeight($value);
        return $this;
    }

    /**
     * Sets enable drm field.
     *
     * @param bool|null $value
     */
    public function enableDrm(?bool $value): self
    {
        $this->instance->setEnableDrm($value);
        return $this;
    }

    /**
     * Sets pad field.
     *
     * @param Pad|null $value
     */
    public function pad(?Pad $value): self
    {
        $this->instance->setPad($value);
        return $this;
    }

    /**
     * Sets crop field.
     *
     * @param Crop|null $value
     */
    public function crop(?Crop $value): self
    {
        $this->instance->setCrop($value);
        return $this;
    }

    /**
     * Sets image overlay field.
     *
     * @param ImageOverlay|null $value
     */
    public function imageOverlay(?ImageOverlay $value): self
    {
        $this->instance->setImageOverlay($value);
        return $this;
    }

    /**
     * Sets text overlay field.
     *
     * @param TextOverlay|null $value
     */
    public function textOverlay(?TextOverlay $value): self
    {
        $this->instance->setTextOverlay($value);
        return $this;
    }

    /**
     * Sets trim field.
     *
     * @param Trim|null $value
     */
    public function trim(?Trim $value): self
    {
        $this->instance->setTrim($value);
        return $this;
    }

    /**
     * Sets animated gif field.
     *
     * @param AnimatedGif|null $value
     */
    public function animatedGif(?AnimatedGif $value): self
    {
        $this->instance->setAnimatedGif($value);
        return $this;
    }

    /**
     * Sets resolution field.
     *
     * @param string|null $value
     */
    public function resolution(?string $value): self
    {
        $this->instance->setResolution($value);
        return $this;
    }

    /**
     * Sets generate subtitles field.
     *
     * @param GenerateSubtitles|null $value
     */
    public function generateSubtitles(?GenerateSubtitles $value): self
    {
        $this->instance->setGenerateSubtitles($value);
        return $this;
    }

    /**
     * Sets mp 4 access field.
     *
     * @param bool|null $value
     */
    public function mp4Access(?bool $value): self
    {
        $this->instance->setMp4Access($value);
        return $this;
    }

    /**
     * Sets per title encoding field.
     *
     * @param bool|null $value
     */
    public function perTitleEncoding(?bool $value): self
    {
        $this->instance->setPerTitleEncoding($value);
        return $this;
    }

    /**
     * Sets process low resolution input field.
     *
     * @param bool|null $value
     */
    public function processLowResolutionInput(?bool $value): self
    {
        $this->instance->setProcessLowResolutionInput($value);
        return $this;
    }

    /**
     * Sets audio only field.
     *
     * @param bool|null $value
     */
    public function audioOnly(?bool $value): self
    {
        $this->instance->setAudioOnly($value);
        return $this;
    }

    /**
     * Sets keep original field.
     *
     * @param bool|null $value
     */
    public function keepOriginal(?bool $value): self
    {
        $this->instance->setKeepOriginal($value);
        return $this;
    }

    /**
     * Sets thumbnail field.
     *
     * @param string|null $value
     */
    public function thumbnail(?string $value): self
    {
        $this->instance->setThumbnail($value);
        return $this;
    }

    /**
     * Sets enable preview thumbnails field.
     *
     * @param bool|null $value
     */
    public function enablePreviewThumbnails(?bool $value): self
    {
        $this->instance->setEnablePreviewThumbnails($value);
        return $this;
    }

    /**
     * Initializes a new Video Assets Upload Request object.
     */
    public function build(): VideoAssetsUploadRequest
    {
        return CoreHelper::clone($this->instance);
    }
}
