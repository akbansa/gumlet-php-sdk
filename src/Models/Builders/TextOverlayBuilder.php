<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models\Builders;

use Core\Utils\CoreHelper;
use GumletRestApisLib\Models\TextOverlay;

/**
 * Builder for model TextOverlay
 *
 * @see TextOverlay
 */
class TextOverlayBuilder
{
    /**
     * @var TextOverlay
     */
    private $instance;

    private function __construct(TextOverlay $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new Text Overlay Builder object.
     *
     * @param string $text
     */
    public static function init(string $text): self
    {
        return new self(new TextOverlay($text));
    }

    /**
     * Sets horizontal align field.
     *
     * @param string|null $value
     */
    public function horizontalAlign(?string $value): self
    {
        $this->instance->setHorizontalAlign($value);
        return $this;
    }

    /**
     * Sets vertical align field.
     *
     * @param string|null $value
     */
    public function verticalAlign(?string $value): self
    {
        $this->instance->setVerticalAlign($value);
        return $this;
    }

    /**
     * Sets horizontal margin field.
     *
     * @param string|null $value
     */
    public function horizontalMargin(?string $value): self
    {
        $this->instance->setHorizontalMargin($value);
        return $this;
    }

    /**
     * Sets vertical margin field.
     *
     * @param string|null $value
     */
    public function verticalMargin(?string $value): self
    {
        $this->instance->setVerticalMargin($value);
        return $this;
    }

    /**
     * Sets color field.
     *
     * @param string|null $value
     */
    public function color(?string $value): self
    {
        $this->instance->setColor($value);
        return $this;
    }

    /**
     * Sets font field.
     *
     * @param string|null $value
     */
    public function font(?string $value): self
    {
        $this->instance->setFont($value);
        return $this;
    }

    /**
     * Sets font size field.
     *
     * @param string|null $value
     */
    public function fontSize(?string $value): self
    {
        $this->instance->setFontSize($value);
        return $this;
    }

    /**
     * Sets opacity field.
     *
     * @param string|null $value
     */
    public function opacity(?string $value): self
    {
        $this->instance->setOpacity($value);
        return $this;
    }

    /**
     * Sets box field.
     *
     * @param bool|null $value
     */
    public function box(?bool $value): self
    {
        $this->instance->setBox($value);
        return $this;
    }

    /**
     * Sets box color field.
     *
     * @param string|null $value
     */
    public function boxColor(?string $value): self
    {
        $this->instance->setBoxColor($value);
        return $this;
    }

    /**
     * Sets box opacity field.
     *
     * @param string|null $value
     */
    public function boxOpacity(?string $value): self
    {
        $this->instance->setBoxOpacity($value);
        return $this;
    }

    /**
     * Sets box border field.
     *
     * @param string|null $value
     */
    public function boxBorder(?string $value): self
    {
        $this->instance->setBoxBorder($value);
        return $this;
    }

    /**
     * Initializes a new Text Overlay object.
     */
    public function build(): TextOverlay
    {
        return CoreHelper::clone($this->instance);
    }
}
