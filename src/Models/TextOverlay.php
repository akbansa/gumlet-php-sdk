<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

/**
 * Text overlay can be used to brand a video or add a label in the form of text.
 */
class TextOverlay implements \JsonSerializable
{
    /**
     * @var string
     */
    private $text;

    /**
     * @var string|null
     */
    private $horizontalAlign;

    /**
     * @var string|null
     */
    private $verticalAlign;

    /**
     * @var string|null
     */
    private $horizontalMargin;

    /**
     * @var string|null
     */
    private $verticalMargin;

    /**
     * @var string|null
     */
    private $color;

    /**
     * @var string|null
     */
    private $font;

    /**
     * @var string|null
     */
    private $fontSize;

    /**
     * @var string|null
     */
    private $opacity;

    /**
     * @var bool|null
     */
    private $box;

    /**
     * @var string|null
     */
    private $boxColor;

    /**
     * @var string|null
     */
    private $boxOpacity;

    /**
     * @var string|null
     */
    private $boxBorder;

    /**
     * @param string $text
     */
    public function __construct(string $text)
    {
        $this->text = $text;
    }

    /**
     * Returns Text.
     * Text to be overlayed on video.
     */
    public function getText(): string
    {
        return $this->text;
    }

    /**
     * Sets Text.
     * Text to be overlayed on video.
     *
     * @required
     * @maps text
     */
    public function setText(string $text): void
    {
        $this->text = $text;
    }

    /**
     * Returns Horizontal Align.
     * This parameter specifies the horizontal alignment of the overlayed image and can be either `left` or
     * `right`. **Default: `right`**
     */
    public function getHorizontalAlign(): ?string
    {
        return $this->horizontalAlign;
    }

    /**
     * Sets Horizontal Align.
     * This parameter specifies the horizontal alignment of the overlayed image and can be either `left` or
     * `right`. **Default: `right`**
     *
     * @maps horizontal_align
     */
    public function setHorizontalAlign(?string $horizontalAlign): void
    {
        $this->horizontalAlign = $horizontalAlign;
    }

    /**
     * Returns Vertical Align.
     * This parameter specifies the vertical alignment of the overlayed image and can be either `top` or
     * `bottom`. **Default: `bottom`**
     */
    public function getVerticalAlign(): ?string
    {
        return $this->verticalAlign;
    }

    /**
     * Sets Vertical Align.
     * This parameter specifies the vertical alignment of the overlayed image and can be either `top` or
     * `bottom`. **Default: `bottom`**
     *
     * @maps vertical_align
     */
    public function setVerticalAlign(?string $verticalAlign): void
    {
        $this->verticalAlign = $verticalAlign;
    }

    /**
     * Returns Horizontal Margin.
     * This parameter defines the horizontal coordinate value of the corner (determined by
     * `horizontal_align`) of the overlay area. Values can be an absolute number of pixels relative to the
     * video width. **Default: `0`**
     */
    public function getHorizontalMargin(): ?string
    {
        return $this->horizontalMargin;
    }

    /**
     * Sets Horizontal Margin.
     * This parameter defines the horizontal coordinate value of the corner (determined by
     * `horizontal_align`) of the overlay area. Values can be an absolute number of pixels relative to the
     * video width. **Default: `0`**
     *
     * @maps horizontal_margin
     */
    public function setHorizontalMargin(?string $horizontalMargin): void
    {
        $this->horizontalMargin = $horizontalMargin;
    }

    /**
     * Returns Vertical Margin.
     * This parameter defines the vertical coordinate value of the corner (determined by vertical_align) of
     * the overlay area. Values can be an absolute number of pixels relative to the video height. **Default:
     * `0`**
     */
    public function getVerticalMargin(): ?string
    {
        return $this->verticalMargin;
    }

    /**
     * Sets Vertical Margin.
     * This parameter defines the vertical coordinate value of the corner (determined by vertical_align) of
     * the overlay area. Values can be an absolute number of pixels relative to the video height. **Default:
     * `0`**
     *
     * @maps vertical_margin
     */
    public function setVerticalMargin(?string $verticalMargin): void
    {
        $this->verticalMargin = $verticalMargin;
    }

    /**
     * Returns Color.
     * Font color for text. **Default: `black`**
     */
    public function getColor(): ?string
    {
        return $this->color;
    }

    /**
     * Sets Color.
     * Font color for text. **Default: `black`**
     *
     * @maps color
     */
    public function setColor(?string $color): void
    {
        $this->color = $color;
    }

    /**
     * Returns Font.
     * Font family type for text. **Default: `sans`**
     */
    public function getFont(): ?string
    {
        return $this->font;
    }

    /**
     * Sets Font.
     * Font family type for text. **Default: `sans`**
     *
     * @maps font
     */
    public function setFont(?string $font): void
    {
        $this->font = $font;
    }

    /**
     * Returns Font Size.
     * Font size in pixels. **Default: `16`**
     */
    public function getFontSize(): ?string
    {
        return $this->fontSize;
    }

    /**
     * Sets Font Size.
     * Font size in pixels. **Default: `16`**
     *
     * @maps font_size
     */
    public function setFontSize(?string $fontSize): void
    {
        $this->fontSize = $fontSize;
    }

    /**
     * Returns Opacity.
     * Overlay text opacity can be specified with opacity parameter where value can be between `0` and
     * `100` where `0` is considered completely transparent and `100` is considered completely opaque.
     * **Default: `100`**
     */
    public function getOpacity(): ?string
    {
        return $this->opacity;
    }

    /**
     * Sets Opacity.
     * Overlay text opacity can be specified with opacity parameter where value can be between `0` and
     * `100` where `0` is considered completely transparent and `100` is considered completely opaque.
     * **Default: `100`**
     *
     * @maps opacity
     */
    public function setOpacity(?string $opacity): void
    {
        $this->opacity = $opacity;
    }

    /**
     * Returns Box.
     * This parameter allows rectangular drawing a box over the overlayed text. **Default: `false`**
     */
    public function getBox(): ?bool
    {
        return $this->box;
    }

    /**
     * Sets Box.
     * This parameter allows rectangular drawing a box over the overlayed text. **Default: `false`**
     *
     * @maps box
     */
    public function setBox(?bool $box): void
    {
        $this->box = $box;
    }

    /**
     * Returns Box Color.
     * Box color can be specified with this parameter. **Default: `white`**
     */
    public function getBoxColor(): ?string
    {
        return $this->boxColor;
    }

    /**
     * Sets Box Color.
     * Box color can be specified with this parameter. **Default: `white`**
     *
     * @maps box_color
     */
    public function setBoxColor(?string $boxColor): void
    {
        $this->boxColor = $boxColor;
    }

    /**
     * Returns Box Opacity.
     * Box opacity can be specified with this parameter. **Default: `100`**
     */
    public function getBoxOpacity(): ?string
    {
        return $this->boxOpacity;
    }

    /**
     * Sets Box Opacity.
     * Box opacity can be specified with this parameter. **Default: `100`**
     *
     * @maps box_opacity
     */
    public function setBoxOpacity(?string $boxOpacity): void
    {
        $this->boxOpacity = $boxOpacity;
    }

    /**
     * Returns Box Border.
     * Padding between the box border and the text can be specified with this parameter in pixels.
     * **Default: `0`**
     */
    public function getBoxBorder(): ?string
    {
        return $this->boxBorder;
    }

    /**
     * Sets Box Border.
     * Padding between the box border and the text can be specified with this parameter in pixels.
     * **Default: `0`**
     *
     * @maps box_border
     */
    public function setBoxBorder(?string $boxBorder): void
    {
        $this->boxBorder = $boxBorder;
    }

    /**
     * Converts the TextOverlay object to a human-readable string representation.
     *
     * @return string The string representation of the TextOverlay object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'TextOverlay',
            [
                'text' => $this->text,
                'horizontalAlign' => $this->horizontalAlign,
                'verticalAlign' => $this->verticalAlign,
                'horizontalMargin' => $this->horizontalMargin,
                'verticalMargin' => $this->verticalMargin,
                'color' => $this->color,
                'font' => $this->font,
                'fontSize' => $this->fontSize,
                'opacity' => $this->opacity,
                'box' => $this->box,
                'boxColor' => $this->boxColor,
                'boxOpacity' => $this->boxOpacity,
                'boxBorder' => $this->boxBorder
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['text']                  = $this->text;
        if (isset($this->horizontalAlign)) {
            $json['horizontal_align']  = $this->horizontalAlign;
        }
        if (isset($this->verticalAlign)) {
            $json['vertical_align']    = $this->verticalAlign;
        }
        if (isset($this->horizontalMargin)) {
            $json['horizontal_margin'] = $this->horizontalMargin;
        }
        if (isset($this->verticalMargin)) {
            $json['vertical_margin']   = $this->verticalMargin;
        }
        if (isset($this->color)) {
            $json['color']             = $this->color;
        }
        if (isset($this->font)) {
            $json['font']              = $this->font;
        }
        if (isset($this->fontSize)) {
            $json['font_size']         = $this->fontSize;
        }
        if (isset($this->opacity)) {
            $json['opacity']           = $this->opacity;
        }
        if (isset($this->box)) {
            $json['box']               = $this->box;
        }
        if (isset($this->boxColor)) {
            $json['box_color']         = $this->boxColor;
        }
        if (isset($this->boxOpacity)) {
            $json['box_opacity']       = $this->boxOpacity;
        }
        if (isset($this->boxBorder)) {
            $json['box_border']        = $this->boxBorder;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
