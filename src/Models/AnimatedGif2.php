<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

/**
 * Create an animated GIF from a video.
 */
class AnimatedGif2 implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $startOffset;

    /**
     * @var string|null
     */
    private $endOffset;

    /**
     * @var string|null
     */
    private $width;

    /**
     * @var string|null
     */
    private $height;

    /**
     * @var string|null
     */
    private $fps;

    /**
     * Returns Start Offset.
     * The time (in seconds or `HH:MM:SS` format) of the video timeline where the animated gif should begin.
     * **Default: `0`**
     */
    public function getStartOffset(): ?string
    {
        return $this->startOffset;
    }

    /**
     * Sets Start Offset.
     * The time (in seconds or `HH:MM:SS` format) of the video timeline where the animated gif should begin.
     * **Default: `0`**
     *
     * @maps start_offset
     */
    public function setStartOffset(?string $startOffset): void
    {
        $this->startOffset = $startOffset;
    }

    /**
     * Returns End Offset.
     * The time (in seconds or `HH:MM:SS` format) of the video timeline where the GIF ends. Defaults to
     * `10` seconds after the start_offset. Maximum duration of GIF is limited to `10` seconds.
     */
    public function getEndOffset(): ?string
    {
        return $this->endOffset;
    }

    /**
     * Sets End Offset.
     * The time (in seconds or `HH:MM:SS` format) of the video timeline where the GIF ends. Defaults to
     * `10` seconds after the start_offset. Maximum duration of GIF is limited to `10` seconds.
     *
     * @maps end_offset
     */
    public function setEndOffset(?string $endOffset): void
    {
        $this->endOffset = $endOffset;
    }

    /**
     * Returns Width.
     * The width in pixels (or in percentage value of asset width) of the animated GIF. Max width is
     * `640px`.
     */
    public function getWidth(): ?string
    {
        return $this->width;
    }

    /**
     * Sets Width.
     * The width in pixels (or in percentage value of asset width) of the animated GIF. Max width is
     * `640px`.
     *
     * @maps width
     */
    public function setWidth(?string $width): void
    {
        $this->width = $width;
    }

    /**
     * Returns Height.
     * The height in pixels (or in percentage value of asset height) of the animated GIF. Max height is
     * `640px`.
     */
    public function getHeight(): ?string
    {
        return $this->height;
    }

    /**
     * Sets Height.
     * The height in pixels (or in percentage value of asset height) of the animated GIF. Max height is
     * `640px`.
     *
     * @maps height
     */
    public function setHeight(?string $height): void
    {
        $this->height = $height;
    }

    /**
     * Returns Fps.
     * The frame rate of the generated GIF. Defaults to `15` fps. Max `30` fps.
     */
    public function getFps(): ?string
    {
        return $this->fps;
    }

    /**
     * Sets Fps.
     * The frame rate of the generated GIF. Defaults to `15` fps. Max `30` fps.
     *
     * @maps fps
     */
    public function setFps(?string $fps): void
    {
        $this->fps = $fps;
    }

    /**
     * Converts the AnimatedGif2 object to a human-readable string representation.
     *
     * @return string The string representation of the AnimatedGif2 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'AnimatedGif2',
            [
                'startOffset' => $this->startOffset,
                'endOffset' => $this->endOffset,
                'width' => $this->width,
                'height' => $this->height,
                'fps' => $this->fps
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->startOffset)) {
            $json['start_offset'] = $this->startOffset;
        }
        if (isset($this->endOffset)) {
            $json['end_offset']   = $this->endOffset;
        }
        if (isset($this->width)) {
            $json['width']        = $this->width;
        }
        if (isset($this->height)) {
            $json['height']       = $this->height;
        }
        if (isset($this->fps)) {
            $json['fps']          = $this->fps;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
