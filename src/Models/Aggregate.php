<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class Aggregate implements \JsonSerializable
{
    /**
     * @var string
     */
    private $metric;

    /**
     * @var string
     */
    private $function;

    /**
     * @param string $metric
     * @param string $function
     */
    public function __construct(string $metric, string $function)
    {
        $this->metric = $metric;
        $this->function = $function;
    }

    /**
     * Returns Metric.
     * The metric to be aggregated for this request.
     */
    public function getMetric(): string
    {
        return $this->metric;
    }

    /**
     * Sets Metric.
     * The metric to be aggregated for this request.
     *
     * @required
     * @maps metric
     * @factory \GumletRestApisLib\Models\Metric1Enum::checkValue
     */
    public function setMetric(string $metric): void
    {
        $this->metric = $metric;
    }

    /**
     * Returns Function.
     * Aggregation function which is to be used.
     */
    public function getFunction(): string
    {
        return $this->function;
    }

    /**
     * Sets Function.
     * Aggregation function which is to be used.
     *
     * @required
     * @maps function
     * @factory \GumletRestApisLib\Models\FunctionEnum::checkValue
     */
    public function setFunction(string $function): void
    {
        $this->function = $function;
    }

    /**
     * Converts the Aggregate object to a human-readable string representation.
     *
     * @return string The string representation of the Aggregate object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('Aggregate', ['metric' => $this->metric, 'function' => $this->function]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['metric']   = Metric1Enum::checkValue($this->metric);
        $json['function'] = FunctionEnum::checkValue($this->function);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
