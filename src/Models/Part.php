<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class Part implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $partNumber;

    /**
     * @var string|null
     */
    private $eTag;

    /**
     * Returns Part Number.
     */
    public function getPartNumber(): ?int
    {
        return $this->partNumber;
    }

    /**
     * Sets Part Number.
     *
     * @maps PartNumber
     */
    public function setPartNumber(?int $partNumber): void
    {
        $this->partNumber = $partNumber;
    }

    /**
     * Returns E Tag.
     * ETag received while uploading the part using PUT
     */
    public function getETag(): ?string
    {
        return $this->eTag;
    }

    /**
     * Sets E Tag.
     * ETag received while uploading the part using PUT
     *
     * @maps ETag
     */
    public function setETag(?string $eTag): void
    {
        $this->eTag = $eTag;
    }

    /**
     * Converts the Part object to a human-readable string representation.
     *
     * @return string The string representation of the Part object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('Part', ['partNumber' => $this->partNumber, 'eTag' => $this->eTag]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->partNumber)) {
            $json['PartNumber'] = $this->partNumber;
        }
        if (isset($this->eTag)) {
            $json['ETag']       = $this->eTag;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
