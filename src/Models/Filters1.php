<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class Filters1 implements \JsonSerializable
{
    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $value;

    /**
     * @var string|null
     */
    private $operator = OperatorEnum::EQUALS;

    /**
     * @param string $name
     * @param string $value
     */
    public function __construct(string $name, string $value)
    {
        $this->name = $name;
        $this->value = $value;
    }

    /**
     * Returns Name.
     * Name of the breakdown to filter data on.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Name of the breakdown to filter data on.
     *
     * @required
     * @maps name
     * @factory \GumletRestApisLib\Models\NameEnum::checkValue
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Value.
     * Value to be matched for the given filter name. Currently we support exact matches.
     */
    public function getValue(): string
    {
        return $this->value;
    }

    /**
     * Sets Value.
     * Value to be matched for the given filter name. Currently we support exact matches.
     *
     * @required
     * @maps value
     */
    public function setValue(string $value): void
    {
        $this->value = $value;
    }

    /**
     * Returns Operator.
     * Operator to be used while filtering the data
     */
    public function getOperator(): ?string
    {
        return $this->operator;
    }

    /**
     * Sets Operator.
     * Operator to be used while filtering the data
     *
     * @maps operator
     * @factory \GumletRestApisLib\Models\OperatorEnum::checkValue
     */
    public function setOperator(?string $operator): void
    {
        $this->operator = $operator;
    }

    /**
     * Converts the Filters1 object to a human-readable string representation.
     *
     * @return string The string representation of the Filters1 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Filters1',
            ['name' => $this->name, 'value' => $this->value, 'operator' => $this->operator]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['name']         = NameEnum::checkValue($this->name);
        $json['value']        = $this->value;
        if (isset($this->operator)) {
            $json['operator'] = OperatorEnum::checkValue($this->operator);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
