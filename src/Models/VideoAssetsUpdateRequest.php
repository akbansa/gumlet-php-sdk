<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class VideoAssetsUpdateRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $assetId;

    /**
     * @var string|null
     */
    private $title;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $tag;

    /**
     * @var CallToAction[]|null
     */
    private $callToActions;

    /**
     * @var string|null
     */
    private $metadata;

    /**
     * @var string[]|null
     */
    private $removeSubtitles;

    /**
     * @var GenerateSubtitles3|null
     */
    private $generateSubtitles;

    /**
     * @param string $assetId
     */
    public function __construct(string $assetId)
    {
        $this->assetId = $assetId;
    }

    /**
     * Returns Asset Id.
     * Asset Id
     */
    public function getAssetId(): string
    {
        return $this->assetId;
    }

    /**
     * Sets Asset Id.
     * Asset Id
     *
     * @required
     * @maps asset_id
     */
    public function setAssetId(string $assetId): void
    {
        $this->assetId = $assetId;
    }

    /**
     * Returns Title.
     * Specify a text string or identifier which can be used for filtering or searching the asset.
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     * Specify a text string or identifier which can be used for filtering or searching the asset.
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Description.
     * Attach some textual data with the asset. This field is neither searchable nor filterable.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Attach some textual data with the asset. This field is neither searchable nor filterable.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Tag.
     * Specify a text string or identifier which can identify an asset or bunch of assets later. You can
     * pass multiple comma separated values.
     */
    public function getTag(): ?string
    {
        return $this->tag;
    }

    /**
     * Sets Tag.
     * Specify a text string or identifier which can identify an asset or bunch of assets later. You can
     * pass multiple comma separated values.
     *
     * @maps tag
     */
    public function setTag(?string $tag): void
    {
        $this->tag = $tag;
    }

    /**
     * Returns Call to Actions.
     * CTA, is an explicit prompt within the video content encouraging viewers to take a particular action.
     *
     * @return CallToAction[]|null
     */
    public function getCallToActions(): ?array
    {
        return $this->callToActions;
    }

    /**
     * Sets Call to Actions.
     * CTA, is an explicit prompt within the video content encouraging viewers to take a particular action.
     *
     * @maps call_to_actions
     *
     * @param CallToAction[]|null $callToActions
     */
    public function setCallToActions(?array $callToActions): void
    {
        $this->callToActions = $callToActions;
    }

    /**
     * Returns Metadata.
     * Set of key-value pairs that you can attach to this Asset. This can be useful for storing additional
     * information.<br/> Example: <br/> <code>  {  "internal_video_id" : "123Abc"  }  </code>
     */
    public function getMetadata(): ?string
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Set of key-value pairs that you can attach to this Asset. This can be useful for storing additional
     * information.<br/> Example: <br/> <code>  {  "internal_video_id" : "123Abc"  }  </code>
     *
     * @maps metadata
     */
    public function setMetadata(?string $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Remove Subtitles.
     * Comma separated string of language codes.
     *
     * @return string[]|null
     */
    public function getRemoveSubtitles(): ?array
    {
        return $this->removeSubtitles;
    }

    /**
     * Sets Remove Subtitles.
     * Comma separated string of language codes.
     *
     * @maps remove_subtitles
     *
     * @param string[]|null $removeSubtitles
     */
    public function setRemoveSubtitles(?array $removeSubtitles): void
    {
        $this->removeSubtitles = $removeSubtitles;
    }

    /**
     * Returns Generate Subtitles.
     * Gumlet allowes to generate subtitles from the audio stream (use <a href='https://en.wikipedia.
     * org/wiki/List_of_ISO_639_language_codes'> ISO 639-1 </a> Language Codes)
     */
    public function getGenerateSubtitles(): ?GenerateSubtitles3
    {
        return $this->generateSubtitles;
    }

    /**
     * Sets Generate Subtitles.
     * Gumlet allowes to generate subtitles from the audio stream (use <a href='https://en.wikipedia.
     * org/wiki/List_of_ISO_639_language_codes'> ISO 639-1 </a> Language Codes)
     *
     * @maps generate_subtitles
     */
    public function setGenerateSubtitles(?GenerateSubtitles3 $generateSubtitles): void
    {
        $this->generateSubtitles = $generateSubtitles;
    }

    /**
     * Converts the VideoAssetsUpdateRequest object to a human-readable string representation.
     *
     * @return string The string representation of the VideoAssetsUpdateRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'VideoAssetsUpdateRequest',
            [
                'assetId' => $this->assetId,
                'title' => $this->title,
                'description' => $this->description,
                'tag' => $this->tag,
                'callToActions' => $this->callToActions,
                'metadata' => $this->metadata,
                'removeSubtitles' => $this->removeSubtitles,
                'generateSubtitles' => $this->generateSubtitles
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['asset_id']               = $this->assetId;
        if (isset($this->title)) {
            $json['title']              = $this->title;
        }
        if (isset($this->description)) {
            $json['description']        = $this->description;
        }
        if (isset($this->tag)) {
            $json['tag']                = $this->tag;
        }
        if (isset($this->callToActions)) {
            $json['call_to_actions']    = $this->callToActions;
        }
        if (isset($this->metadata)) {
            $json['metadata']           = $this->metadata;
        }
        if (isset($this->removeSubtitles)) {
            $json['remove_subtitles']   = $this->removeSubtitles;
        }
        if (isset($this->generateSubtitles)) {
            $json['generate_subtitles'] = $this->generateSubtitles;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
