<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class VideoAnalyticsRequest implements \JsonSerializable
{
    /**
     * @var string[]
     */
    private $metrics;

    /**
     * @var DateRange
     */
    private $dateRange;

    /**
     * @var int|null
     */
    private $topAssetsCount = 5;

    /**
     * @var Filters|null
     */
    private $filters;

    /**
     * @param string[] $metrics
     * @param DateRange $dateRange
     */
    public function __construct(array $metrics, DateRange $dateRange)
    {
        $this->metrics = $metrics;
        $this->dateRange = $dateRange;
    }

    /**
     * Returns Metrics.
     * Define the metric you need the data for, currently we only support `top_assets` and
     * 'bandwidth_consumption_by_collection'
     *
     * @return string[]
     */
    public function getMetrics(): array
    {
        return $this->metrics;
    }

    /**
     * Sets Metrics.
     * Define the metric you need the data for, currently we only support `top_assets` and
     * 'bandwidth_consumption_by_collection'
     *
     * @required
     * @maps metrics
     *
     * @param string[] $metrics
     */
    public function setMetrics(array $metrics): void
    {
        $this->metrics = $metrics;
    }

    /**
     * Returns Date Range.
     * The timeframe to get the data for. Currently we only support a maximum of 60 days between `start_at`
     * and `end_at`.
     */
    public function getDateRange(): DateRange
    {
        return $this->dateRange;
    }

    /**
     * Sets Date Range.
     * The timeframe to get the data for. Currently we only support a maximum of 60 days between `start_at`
     * and `end_at`.
     *
     * @required
     * @maps date_range
     */
    public function setDateRange(DateRange $dateRange): void
    {
        $this->dateRange = $dateRange;
    }

    /**
     * Returns Top Assets Count.
     * Count of video assets that should be returned, by default top *five assets* are returned but at max
     * *only 100 assets* can be retrieved.
     */
    public function getTopAssetsCount(): ?int
    {
        return $this->topAssetsCount;
    }

    /**
     * Sets Top Assets Count.
     * Count of video assets that should be returned, by default top *five assets* are returned but at max
     * *only 100 assets* can be retrieved.
     *
     * @maps top_assets_count
     */
    public function setTopAssetsCount(?int $topAssetsCount): void
    {
        $this->topAssetsCount = $topAssetsCount;
    }

    /**
     * Returns Filters.
     */
    public function getFilters(): ?Filters
    {
        return $this->filters;
    }

    /**
     * Sets Filters.
     *
     * @maps filters
     */
    public function setFilters(?Filters $filters): void
    {
        $this->filters = $filters;
    }

    /**
     * Converts the VideoAnalyticsRequest object to a human-readable string representation.
     *
     * @return string The string representation of the VideoAnalyticsRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'VideoAnalyticsRequest',
            [
                'metrics' => $this->metrics,
                'dateRange' => $this->dateRange,
                'topAssetsCount' => $this->topAssetsCount,
                'filters' => $this->filters
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['metrics']              = $this->metrics;
        $json['date_range']           = $this->dateRange;
        if (isset($this->topAssetsCount)) {
            $json['top_assets_count'] = $this->topAssetsCount;
        }
        if (isset($this->filters)) {
            $json['filters']          = $this->filters;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
