<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class CallToAction implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $text;

    /**
     * @var string|null
     */
    private $url;

    /**
     * @var int|null
     */
    private $startTime;

    /**
     * @var int|null
     */
    private $endTime;

    /**
     * @var string|null
     */
    private $fontColor;

    /**
     * @var string|null
     */
    private $backgroundColor;

    /**
     * @var int|null
     */
    private $positionFromTop;

    /**
     * @var string|null
     */
    private $positionFromRight;

    /**
     * Returns Text.
     */
    public function getText(): ?string
    {
        return $this->text;
    }

    /**
     * Sets Text.
     *
     * @maps text
     */
    public function setText(?string $text): void
    {
        $this->text = $text;
    }

    /**
     * Returns Url.
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     *
     * @maps url
     */
    public function setUrl(?string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Start Time.
     */
    public function getStartTime(): ?int
    {
        return $this->startTime;
    }

    /**
     * Sets Start Time.
     *
     * @maps start_time
     */
    public function setStartTime(?int $startTime): void
    {
        $this->startTime = $startTime;
    }

    /**
     * Returns End Time.
     */
    public function getEndTime(): ?int
    {
        return $this->endTime;
    }

    /**
     * Sets End Time.
     *
     * @maps end_time
     */
    public function setEndTime(?int $endTime): void
    {
        $this->endTime = $endTime;
    }

    /**
     * Returns Font Color.
     * hex value of color
     */
    public function getFontColor(): ?string
    {
        return $this->fontColor;
    }

    /**
     * Sets Font Color.
     * hex value of color
     *
     * @maps font_color
     */
    public function setFontColor(?string $fontColor): void
    {
        $this->fontColor = $fontColor;
    }

    /**
     * Returns Background Color.
     * hex code of color
     */
    public function getBackgroundColor(): ?string
    {
        return $this->backgroundColor;
    }

    /**
     * Sets Background Color.
     * hex code of color
     *
     * @maps background_color
     */
    public function setBackgroundColor(?string $backgroundColor): void
    {
        $this->backgroundColor = $backgroundColor;
    }

    /**
     * Returns Position From Top.
     * number of pixels from top
     */
    public function getPositionFromTop(): ?int
    {
        return $this->positionFromTop;
    }

    /**
     * Sets Position From Top.
     * number of pixels from top
     *
     * @maps position_from_top
     */
    public function setPositionFromTop(?int $positionFromTop): void
    {
        $this->positionFromTop = $positionFromTop;
    }

    /**
     * Returns Position From Right.
     * number of pixels from right
     */
    public function getPositionFromRight(): ?string
    {
        return $this->positionFromRight;
    }

    /**
     * Sets Position From Right.
     * number of pixels from right
     *
     * @maps position_from_right
     */
    public function setPositionFromRight(?string $positionFromRight): void
    {
        $this->positionFromRight = $positionFromRight;
    }

    /**
     * Converts the CallToAction object to a human-readable string representation.
     *
     * @return string The string representation of the CallToAction object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'CallToAction',
            [
                'text' => $this->text,
                'url' => $this->url,
                'startTime' => $this->startTime,
                'endTime' => $this->endTime,
                'fontColor' => $this->fontColor,
                'backgroundColor' => $this->backgroundColor,
                'positionFromTop' => $this->positionFromTop,
                'positionFromRight' => $this->positionFromRight
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->text)) {
            $json['text']                = $this->text;
        }
        if (isset($this->url)) {
            $json['url']                 = $this->url;
        }
        if (isset($this->startTime)) {
            $json['start_time']          = $this->startTime;
        }
        if (isset($this->endTime)) {
            $json['end_time']            = $this->endTime;
        }
        if (isset($this->fontColor)) {
            $json['font_color']          = $this->fontColor;
        }
        if (isset($this->backgroundColor)) {
            $json['background_color']    = $this->backgroundColor;
        }
        if (isset($this->positionFromTop)) {
            $json['position_from_top']   = $this->positionFromTop;
        }
        if (isset($this->positionFromRight)) {
            $json['position_from_right'] = $this->positionFromRight;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
