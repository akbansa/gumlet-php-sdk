<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class ChannelSettings1 implements \JsonSerializable
{
    /**
     * @var bool|null
     */
    private $active = true;

    /**
     * @var string|null
     */
    private $privacyType;

    /**
     * Returns Active.
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * Sets Active.
     *
     * @maps active
     */
    public function setActive(?bool $active): void
    {
        $this->active = $active;
    }

    /**
     * Returns Privacy Type.
     */
    public function getPrivacyType(): ?string
    {
        return $this->privacyType;
    }

    /**
     * Sets Privacy Type.
     *
     * @maps privacy_type
     */
    public function setPrivacyType(?string $privacyType): void
    {
        $this->privacyType = $privacyType;
    }

    /**
     * Converts the ChannelSettings1 object to a human-readable string representation.
     *
     * @return string The string representation of the ChannelSettings1 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ChannelSettings1',
            ['active' => $this->active, 'privacyType' => $this->privacyType]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->active)) {
            $json['active']       = $this->active;
        }
        if (isset($this->privacyType)) {
            $json['privacy_type'] = $this->privacyType;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
