<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class StorageDetails implements \JsonSerializable
{
    /**
     * @var Video[]|null
     */
    private $video;

    /**
     * @var Audio[]|null
     */
    private $audio;

    /**
     * @var Playlist[]|null
     */
    private $playlist;

    /**
     * @var Thumbnail[]|null
     */
    private $thumbnail;

    /**
     * @var Subtitle[]|null
     */
    private $subtitle;

    /**
     * @var PreviewThumbnail[]|null
     */
    private $previewThumbnail;

    /**
     * Returns Video.
     *
     * @return Video[]|null
     */
    public function getVideo(): ?array
    {
        return $this->video;
    }

    /**
     * Sets Video.
     *
     * @maps video
     *
     * @param Video[]|null $video
     */
    public function setVideo(?array $video): void
    {
        $this->video = $video;
    }

    /**
     * Returns Audio.
     *
     * @return Audio[]|null
     */
    public function getAudio(): ?array
    {
        return $this->audio;
    }

    /**
     * Sets Audio.
     *
     * @maps audio
     *
     * @param Audio[]|null $audio
     */
    public function setAudio(?array $audio): void
    {
        $this->audio = $audio;
    }

    /**
     * Returns Playlist.
     *
     * @return Playlist[]|null
     */
    public function getPlaylist(): ?array
    {
        return $this->playlist;
    }

    /**
     * Sets Playlist.
     *
     * @maps playlist
     *
     * @param Playlist[]|null $playlist
     */
    public function setPlaylist(?array $playlist): void
    {
        $this->playlist = $playlist;
    }

    /**
     * Returns Thumbnail.
     *
     * @return Thumbnail[]|null
     */
    public function getThumbnail(): ?array
    {
        return $this->thumbnail;
    }

    /**
     * Sets Thumbnail.
     *
     * @maps thumbnail
     *
     * @param Thumbnail[]|null $thumbnail
     */
    public function setThumbnail(?array $thumbnail): void
    {
        $this->thumbnail = $thumbnail;
    }

    /**
     * Returns Subtitle.
     *
     * @return Subtitle[]|null
     */
    public function getSubtitle(): ?array
    {
        return $this->subtitle;
    }

    /**
     * Sets Subtitle.
     *
     * @maps subtitle
     *
     * @param Subtitle[]|null $subtitle
     */
    public function setSubtitle(?array $subtitle): void
    {
        $this->subtitle = $subtitle;
    }

    /**
     * Returns Preview Thumbnail.
     *
     * @return PreviewThumbnail[]|null
     */
    public function getPreviewThumbnail(): ?array
    {
        return $this->previewThumbnail;
    }

    /**
     * Sets Preview Thumbnail.
     *
     * @maps previewThumbnail
     *
     * @param PreviewThumbnail[]|null $previewThumbnail
     */
    public function setPreviewThumbnail(?array $previewThumbnail): void
    {
        $this->previewThumbnail = $previewThumbnail;
    }

    /**
     * Converts the StorageDetails object to a human-readable string representation.
     *
     * @return string The string representation of the StorageDetails object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'StorageDetails',
            [
                'video' => $this->video,
                'audio' => $this->audio,
                'playlist' => $this->playlist,
                'thumbnail' => $this->thumbnail,
                'subtitle' => $this->subtitle,
                'previewThumbnail' => $this->previewThumbnail
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->video)) {
            $json['video']            = $this->video;
        }
        if (isset($this->audio)) {
            $json['audio']            = $this->audio;
        }
        if (isset($this->playlist)) {
            $json['playlist']         = $this->playlist;
        }
        if (isset($this->thumbnail)) {
            $json['thumbnail']        = $this->thumbnail;
        }
        if (isset($this->subtitle)) {
            $json['subtitle']         = $this->subtitle;
        }
        if (isset($this->previewThumbnail)) {
            $json['previewThumbnail'] = $this->previewThumbnail;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
