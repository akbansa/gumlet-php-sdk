<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class InsightsAggregatedDataRequest implements \JsonSerializable
{
    /**
     * @var Aggregate[]
     */
    private $aggregate;

    /**
     * @var string
     */
    private $propertyId;

    /**
     * @var Timeframe2
     */
    private $timeframe;

    /**
     * @var Filters1[]|null
     */
    private $filters;

    /**
     * @param Aggregate[] $aggregate
     * @param string $propertyId
     * @param Timeframe2 $timeframe
     */
    public function __construct(array $aggregate, string $propertyId, Timeframe2 $timeframe)
    {
        $this->aggregate = $aggregate;
        $this->propertyId = $propertyId;
        $this->timeframe = $timeframe;
    }

    /**
     * Returns Aggregate.
     * Aggregate multiple metrics at the same time
     *
     * @return Aggregate[]
     */
    public function getAggregate(): array
    {
        return $this->aggregate;
    }

    /**
     * Sets Aggregate.
     * Aggregate multiple metrics at the same time
     *
     * @required
     * @maps aggregate
     *
     * @param Aggregate[] $aggregate
     */
    public function setAggregate(array $aggregate): void
    {
        $this->aggregate = $aggregate;
    }

    /**
     * Returns Property Id.
     * The five to ten character unique identifier of the Gumlet Insight Property available on the
     * dashboard.
     */
    public function getPropertyId(): string
    {
        return $this->propertyId;
    }

    /**
     * Sets Property Id.
     * The five to ten character unique identifier of the Gumlet Insight Property available on the
     * dashboard.
     *
     * @required
     * @maps property_id
     */
    public function setPropertyId(string $propertyId): void
    {
        $this->propertyId = $propertyId;
    }

    /**
     * Returns Timeframe.
     * The timeframe to get the data for. Currently we only support maximum difference between `start_at`
     * and `end_at` to be *60 days*
     */
    public function getTimeframe(): Timeframe2
    {
        return $this->timeframe;
    }

    /**
     * Sets Timeframe.
     * The timeframe to get the data for. Currently we only support maximum difference between `start_at`
     * and `end_at` to be *60 days*
     *
     * @required
     * @maps timeframe
     */
    public function setTimeframe(Timeframe2 $timeframe): void
    {
        $this->timeframe = $timeframe;
    }

    /**
     * Returns Filters.
     * Get aggregations for metrics with multiple filters, `value` should be an exact match
     *
     * @return Filters1[]|null
     */
    public function getFilters(): ?array
    {
        return $this->filters;
    }

    /**
     * Sets Filters.
     * Get aggregations for metrics with multiple filters, `value` should be an exact match
     *
     * @maps filters
     *
     * @param Filters1[]|null $filters
     */
    public function setFilters(?array $filters): void
    {
        $this->filters = $filters;
    }

    /**
     * Converts the InsightsAggregatedDataRequest object to a human-readable string representation.
     *
     * @return string The string representation of the InsightsAggregatedDataRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'InsightsAggregatedDataRequest',
            [
                'aggregate' => $this->aggregate,
                'propertyId' => $this->propertyId,
                'timeframe' => $this->timeframe,
                'filters' => $this->filters
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['aggregate']   = $this->aggregate;
        $json['property_id'] = $this->propertyId;
        $json['timeframe']   = $this->timeframe;
        if (isset($this->filters)) {
            $json['filters'] = $this->filters;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
