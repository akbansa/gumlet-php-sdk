<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

/**
 * This is a required field if collection type is cloudflare.
 */
class Cloudflare implements \JsonSerializable
{
    /**
     * @var string
     */
    private $bucketName;

    /**
     * @var string
     */
    private $accessKey;

    /**
     * @var string
     */
    private $accountId;

    /**
     * @var string
     */
    private $secret;

    /**
     * @var string|null
     */
    private $basePath;

    /**
     * @param string $bucketName
     * @param string $accessKey
     * @param string $accountId
     * @param string $secret
     */
    public function __construct(string $bucketName, string $accessKey, string $accountId, string $secret)
    {
        $this->bucketName = $bucketName;
        $this->accessKey = $accessKey;
        $this->accountId = $accountId;
        $this->secret = $secret;
    }

    /**
     * Returns Bucket Name.
     */
    public function getBucketName(): string
    {
        return $this->bucketName;
    }

    /**
     * Sets Bucket Name.
     *
     * @required
     * @maps bucket_name
     */
    public function setBucketName(string $bucketName): void
    {
        $this->bucketName = $bucketName;
    }

    /**
     * Returns Access Key.
     */
    public function getAccessKey(): string
    {
        return $this->accessKey;
    }

    /**
     * Sets Access Key.
     *
     * @required
     * @maps access_key
     */
    public function setAccessKey(string $accessKey): void
    {
        $this->accessKey = $accessKey;
    }

    /**
     * Returns Account Id.
     */
    public function getAccountId(): string
    {
        return $this->accountId;
    }

    /**
     * Sets Account Id.
     *
     * @required
     * @maps account_id
     */
    public function setAccountId(string $accountId): void
    {
        $this->accountId = $accountId;
    }

    /**
     * Returns Secret.
     */
    public function getSecret(): string
    {
        return $this->secret;
    }

    /**
     * Sets Secret.
     *
     * @required
     * @maps secret
     */
    public function setSecret(string $secret): void
    {
        $this->secret = $secret;
    }

    /**
     * Returns Base Path.
     */
    public function getBasePath(): ?string
    {
        return $this->basePath;
    }

    /**
     * Sets Base Path.
     *
     * @maps base_path
     */
    public function setBasePath(?string $basePath): void
    {
        $this->basePath = $basePath;
    }

    /**
     * Converts the Cloudflare object to a human-readable string representation.
     *
     * @return string The string representation of the Cloudflare object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Cloudflare',
            [
                'bucketName' => $this->bucketName,
                'accessKey' => $this->accessKey,
                'accountId' => $this->accountId,
                'secret' => $this->secret,
                'basePath' => $this->basePath
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['bucket_name']   = $this->bucketName;
        $json['access_key']    = $this->accessKey;
        $json['account_id']    = $this->accountId;
        $json['secret']        = $this->secret;
        if (isset($this->basePath)) {
            $json['base_path'] = $this->basePath;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
