<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class PlayerConfig implements \JsonSerializable
{
    /**
     * @var bool|null
     */
    private $preload = true;

    /**
     * @var bool|null
     */
    private $autoplay = true;

    /**
     * @var bool|null
     */
    private $disableSeek = true;

    /**
     * @var bool|null
     */
    private $disablePlayerControls = true;

    /**
     * @var bool|null
     */
    private $poweredByGumletOverlay = true;

    /**
     * @var bool|null
     */
    private $allowDrmProtectedVideos = true;

    /**
     * @var bool|null
     */
    private $loop = true;

    /**
     * @var string|null
     */
    private $playerColor;

    /**
     * @var bool|null
     */
    private $includeSeo = true;

    /**
     * @var bool|null
     */
    private $subtitleEnabled = true;

    /**
     * @var array|null
     */
    private $pixelTags;

    /**
     * @var int|null
     */
    private $logoWidth = 0;

    /**
     * @var int|null
     */
    private $logoHeight = 0;

    /**
     * @var bool|null
     */
    private $dynamicWatermark = true;

    /**
     * @var int|null
     */
    private $watermarkFontSize = 0;

    /**
     * @var string|null
     */
    private $watermarkFontColor;

    /**
     * @var string|null
     */
    private $watermarkBgColor;

    /**
     * @var int|null
     */
    private $watermarkInterval = 0;

    /**
     * Returns Preload.
     */
    public function getPreload(): ?bool
    {
        return $this->preload;
    }

    /**
     * Sets Preload.
     *
     * @maps preload
     */
    public function setPreload(?bool $preload): void
    {
        $this->preload = $preload;
    }

    /**
     * Returns Autoplay.
     */
    public function getAutoplay(): ?bool
    {
        return $this->autoplay;
    }

    /**
     * Sets Autoplay.
     *
     * @maps autoplay
     */
    public function setAutoplay(?bool $autoplay): void
    {
        $this->autoplay = $autoplay;
    }

    /**
     * Returns Disable Seek.
     */
    public function getDisableSeek(): ?bool
    {
        return $this->disableSeek;
    }

    /**
     * Sets Disable Seek.
     *
     * @maps disable_seek
     */
    public function setDisableSeek(?bool $disableSeek): void
    {
        $this->disableSeek = $disableSeek;
    }

    /**
     * Returns Disable Player Controls.
     */
    public function getDisablePlayerControls(): ?bool
    {
        return $this->disablePlayerControls;
    }

    /**
     * Sets Disable Player Controls.
     *
     * @maps disable_player_controls
     */
    public function setDisablePlayerControls(?bool $disablePlayerControls): void
    {
        $this->disablePlayerControls = $disablePlayerControls;
    }

    /**
     * Returns Powered by Gumlet Overlay.
     */
    public function getPoweredByGumletOverlay(): ?bool
    {
        return $this->poweredByGumletOverlay;
    }

    /**
     * Sets Powered by Gumlet Overlay.
     *
     * @maps powered_by_gumlet_overlay
     */
    public function setPoweredByGumletOverlay(?bool $poweredByGumletOverlay): void
    {
        $this->poweredByGumletOverlay = $poweredByGumletOverlay;
    }

    /**
     * Returns Allow Drm Protected Videos.
     */
    public function getAllowDrmProtectedVideos(): ?bool
    {
        return $this->allowDrmProtectedVideos;
    }

    /**
     * Sets Allow Drm Protected Videos.
     *
     * @maps allow_drm_protected_videos
     */
    public function setAllowDrmProtectedVideos(?bool $allowDrmProtectedVideos): void
    {
        $this->allowDrmProtectedVideos = $allowDrmProtectedVideos;
    }

    /**
     * Returns Loop.
     */
    public function getLoop(): ?bool
    {
        return $this->loop;
    }

    /**
     * Sets Loop.
     *
     * @maps loop
     */
    public function setLoop(?bool $loop): void
    {
        $this->loop = $loop;
    }

    /**
     * Returns Player Color.
     */
    public function getPlayerColor(): ?string
    {
        return $this->playerColor;
    }

    /**
     * Sets Player Color.
     *
     * @maps player_color
     */
    public function setPlayerColor(?string $playerColor): void
    {
        $this->playerColor = $playerColor;
    }

    /**
     * Returns Include Seo.
     */
    public function getIncludeSeo(): ?bool
    {
        return $this->includeSeo;
    }

    /**
     * Sets Include Seo.
     *
     * @maps include_seo
     */
    public function setIncludeSeo(?bool $includeSeo): void
    {
        $this->includeSeo = $includeSeo;
    }

    /**
     * Returns Subtitle Enabled.
     */
    public function getSubtitleEnabled(): ?bool
    {
        return $this->subtitleEnabled;
    }

    /**
     * Sets Subtitle Enabled.
     *
     * @maps subtitle_enabled
     */
    public function setSubtitleEnabled(?bool $subtitleEnabled): void
    {
        $this->subtitleEnabled = $subtitleEnabled;
    }

    /**
     * Returns Pixel Tags.
     */
    public function getPixelTags(): ?array
    {
        return $this->pixelTags;
    }

    /**
     * Sets Pixel Tags.
     *
     * @maps pixel_tags
     */
    public function setPixelTags(?array $pixelTags): void
    {
        $this->pixelTags = $pixelTags;
    }

    /**
     * Returns Logo Width.
     */
    public function getLogoWidth(): ?int
    {
        return $this->logoWidth;
    }

    /**
     * Sets Logo Width.
     *
     * @maps logo_width
     */
    public function setLogoWidth(?int $logoWidth): void
    {
        $this->logoWidth = $logoWidth;
    }

    /**
     * Returns Logo Height.
     */
    public function getLogoHeight(): ?int
    {
        return $this->logoHeight;
    }

    /**
     * Sets Logo Height.
     *
     * @maps logo_height
     */
    public function setLogoHeight(?int $logoHeight): void
    {
        $this->logoHeight = $logoHeight;
    }

    /**
     * Returns Dynamic Watermark.
     */
    public function getDynamicWatermark(): ?bool
    {
        return $this->dynamicWatermark;
    }

    /**
     * Sets Dynamic Watermark.
     *
     * @maps dynamic_watermark
     */
    public function setDynamicWatermark(?bool $dynamicWatermark): void
    {
        $this->dynamicWatermark = $dynamicWatermark;
    }

    /**
     * Returns Watermark Font Size.
     */
    public function getWatermarkFontSize(): ?int
    {
        return $this->watermarkFontSize;
    }

    /**
     * Sets Watermark Font Size.
     *
     * @maps watermark_font_size
     */
    public function setWatermarkFontSize(?int $watermarkFontSize): void
    {
        $this->watermarkFontSize = $watermarkFontSize;
    }

    /**
     * Returns Watermark Font Color.
     */
    public function getWatermarkFontColor(): ?string
    {
        return $this->watermarkFontColor;
    }

    /**
     * Sets Watermark Font Color.
     *
     * @maps watermark_font_color
     */
    public function setWatermarkFontColor(?string $watermarkFontColor): void
    {
        $this->watermarkFontColor = $watermarkFontColor;
    }

    /**
     * Returns Watermark Bg Color.
     */
    public function getWatermarkBgColor(): ?string
    {
        return $this->watermarkBgColor;
    }

    /**
     * Sets Watermark Bg Color.
     *
     * @maps watermark_bg_color
     */
    public function setWatermarkBgColor(?string $watermarkBgColor): void
    {
        $this->watermarkBgColor = $watermarkBgColor;
    }

    /**
     * Returns Watermark Interval.
     */
    public function getWatermarkInterval(): ?int
    {
        return $this->watermarkInterval;
    }

    /**
     * Sets Watermark Interval.
     *
     * @maps watermark_interval
     */
    public function setWatermarkInterval(?int $watermarkInterval): void
    {
        $this->watermarkInterval = $watermarkInterval;
    }

    /**
     * Converts the PlayerConfig object to a human-readable string representation.
     *
     * @return string The string representation of the PlayerConfig object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'PlayerConfig',
            [
                'preload' => $this->preload,
                'autoplay' => $this->autoplay,
                'disableSeek' => $this->disableSeek,
                'disablePlayerControls' => $this->disablePlayerControls,
                'poweredByGumletOverlay' => $this->poweredByGumletOverlay,
                'allowDrmProtectedVideos' => $this->allowDrmProtectedVideos,
                'loop' => $this->loop,
                'playerColor' => $this->playerColor,
                'includeSeo' => $this->includeSeo,
                'subtitleEnabled' => $this->subtitleEnabled,
                'pixelTags' => $this->pixelTags,
                'logoWidth' => $this->logoWidth,
                'logoHeight' => $this->logoHeight,
                'dynamicWatermark' => $this->dynamicWatermark,
                'watermarkFontSize' => $this->watermarkFontSize,
                'watermarkFontColor' => $this->watermarkFontColor,
                'watermarkBgColor' => $this->watermarkBgColor,
                'watermarkInterval' => $this->watermarkInterval
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->preload)) {
            $json['preload']                    = $this->preload;
        }
        if (isset($this->autoplay)) {
            $json['autoplay']                   = $this->autoplay;
        }
        if (isset($this->disableSeek)) {
            $json['disable_seek']               = $this->disableSeek;
        }
        if (isset($this->disablePlayerControls)) {
            $json['disable_player_controls']    = $this->disablePlayerControls;
        }
        if (isset($this->poweredByGumletOverlay)) {
            $json['powered_by_gumlet_overlay']  = $this->poweredByGumletOverlay;
        }
        if (isset($this->allowDrmProtectedVideos)) {
            $json['allow_drm_protected_videos'] = $this->allowDrmProtectedVideos;
        }
        if (isset($this->loop)) {
            $json['loop']                       = $this->loop;
        }
        if (isset($this->playerColor)) {
            $json['player_color']               = $this->playerColor;
        }
        if (isset($this->includeSeo)) {
            $json['include_seo']                = $this->includeSeo;
        }
        if (isset($this->subtitleEnabled)) {
            $json['subtitle_enabled']           = $this->subtitleEnabled;
        }
        if (isset($this->pixelTags)) {
            $json['pixel_tags']                 = $this->pixelTags;
        }
        if (isset($this->logoWidth)) {
            $json['logo_width']                 = $this->logoWidth;
        }
        if (isset($this->logoHeight)) {
            $json['logo_height']                = $this->logoHeight;
        }
        if (isset($this->dynamicWatermark)) {
            $json['dynamic_watermark']          = $this->dynamicWatermark;
        }
        if (isset($this->watermarkFontSize)) {
            $json['watermark_font_size']        = $this->watermarkFontSize;
        }
        if (isset($this->watermarkFontColor)) {
            $json['watermark_font_color']       = $this->watermarkFontColor;
        }
        if (isset($this->watermarkBgColor)) {
            $json['watermark_bg_color']         = $this->watermarkBgColor;
        }
        if (isset($this->watermarkInterval)) {
            $json['watermark_interval']         = $this->watermarkInterval;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
