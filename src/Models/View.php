<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class View implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $x = 0;

    /**
     * @var array|null
     */
    private $y;

    /**
     * @var string|null
     */
    private $unit;

    /**
     * Returns X.
     */
    public function getX(): ?int
    {
        return $this->x;
    }

    /**
     * Sets X.
     *
     * @maps x
     */
    public function setX(?int $x): void
    {
        $this->x = $x;
    }

    /**
     * Returns Y.
     */
    public function getY(): ?array
    {
        return $this->y;
    }

    /**
     * Sets Y.
     *
     * @maps y
     */
    public function setY(?array $y): void
    {
        $this->y = $y;
    }

    /**
     * Returns Unit.
     */
    public function getUnit(): ?string
    {
        return $this->unit;
    }

    /**
     * Sets Unit.
     *
     * @maps unit
     */
    public function setUnit(?string $unit): void
    {
        $this->unit = $unit;
    }

    /**
     * Converts the View object to a human-readable string representation.
     *
     * @return string The string representation of the View object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('View', ['x' => $this->x, 'y' => $this->y, 'unit' => $this->unit]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->x)) {
            $json['x']    = $this->x;
        }
        if (isset($this->y)) {
            $json['y']    = $this->y;
        }
        if (isset($this->unit)) {
            $json['unit'] = $this->unit;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
