<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

/**
 * Sort the response data according to key or value
 */
class Sort implements \JsonSerializable
{
    /**
     * @var string
     */
    private $by;

    /**
     * @var string
     */
    private $order;

    /**
     * @param string $by
     * @param string $order
     */
    public function __construct(string $by, string $order)
    {
        $this->by = $by;
        $this->order = $order;
    }

    /**
     * Returns By.
     */
    public function getBy(): string
    {
        return $this->by;
    }

    /**
     * Sets By.
     *
     * @required
     * @maps by
     * @factory \GumletRestApisLib\Models\ByEnum::checkValue
     */
    public function setBy(string $by): void
    {
        $this->by = $by;
    }

    /**
     * Returns Order.
     */
    public function getOrder(): string
    {
        return $this->order;
    }

    /**
     * Sets Order.
     *
     * @required
     * @maps order
     * @factory \GumletRestApisLib\Models\OrderEnum::checkValue
     */
    public function setOrder(string $order): void
    {
        $this->order = $order;
    }

    /**
     * Converts the Sort object to a human-readable string representation.
     *
     * @return string The string representation of the Sort object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('Sort', ['by' => $this->by, 'order' => $this->order]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['by']    = ByEnum::checkValue($this->by);
        $json['order'] = OrderEnum::checkValue($this->order);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
