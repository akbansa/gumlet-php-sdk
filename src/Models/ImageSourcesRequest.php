<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class ImageSourcesRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $namespace;

    /**
     * @var string
     */
    private $type;

    /**
     * @var Aws4|null
     */
    private $aws;

    /**
     * @var Proxy2|null
     */
    private $proxy;

    /**
     * @var Gcs2|null
     */
    private $gcs;

    /**
     * @var Dostorage2|null
     */
    private $dostorage;

    /**
     * @var Wasabi2|null
     */
    private $wasabi;

    /**
     * @var Cloudinary2|null
     */
    private $cloudinary;

    /**
     * @var Azure2|null
     */
    private $azure;

    /**
     * @var Linode2|null
     */
    private $linode;

    /**
     * @var Backblaze2|null
     */
    private $backblaze;

    /**
     * @var Cloudflare2|null
     */
    private $cloudflare;

    /**
     * @param string $namespace
     * @param string $type
     */
    public function __construct(string $namespace, string $type)
    {
        $this->namespace = $namespace;
        $this->type = $type;
    }

    /**
     * Returns Namespace.
     * unique subdomain associated with the image source
     */
    public function getNamespace(): string
    {
        return $this->namespace;
    }

    /**
     * Sets Namespace.
     * unique subdomain associated with the image source
     *
     * @required
     * @maps namespace
     */
    public function setNamespace(string $namespace): void
    {
        $this->namespace = $namespace;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     * @factory \GumletRestApisLib\Models\Type2Enum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Aws.
     * This is a required field if source type is aws.
     */
    public function getAws(): ?Aws4
    {
        return $this->aws;
    }

    /**
     * Sets Aws.
     * This is a required field if source type is aws.
     *
     * @maps aws
     */
    public function setAws(?Aws4 $aws): void
    {
        $this->aws = $aws;
    }

    /**
     * Returns Proxy.
     * This is a required field if source type is proxy.
     */
    public function getProxy(): ?Proxy2
    {
        return $this->proxy;
    }

    /**
     * Sets Proxy.
     * This is a required field if source type is proxy.
     *
     * @maps proxy
     */
    public function setProxy(?Proxy2 $proxy): void
    {
        $this->proxy = $proxy;
    }

    /**
     * Returns Gcs.
     * This is a required field if source type is gcs.
     */
    public function getGcs(): ?Gcs2
    {
        return $this->gcs;
    }

    /**
     * Sets Gcs.
     * This is a required field if source type is gcs.
     *
     * @maps gcs
     */
    public function setGcs(?Gcs2 $gcs): void
    {
        $this->gcs = $gcs;
    }

    /**
     * Returns Dostorage.
     * This is a required field if source type is dostorage.
     */
    public function getDostorage(): ?Dostorage2
    {
        return $this->dostorage;
    }

    /**
     * Sets Dostorage.
     * This is a required field if source type is dostorage.
     *
     * @maps dostorage
     */
    public function setDostorage(?Dostorage2 $dostorage): void
    {
        $this->dostorage = $dostorage;
    }

    /**
     * Returns Wasabi.
     * This is a required field if source type is wasabi.
     */
    public function getWasabi(): ?Wasabi2
    {
        return $this->wasabi;
    }

    /**
     * Sets Wasabi.
     * This is a required field if source type is wasabi.
     *
     * @maps wasabi
     */
    public function setWasabi(?Wasabi2 $wasabi): void
    {
        $this->wasabi = $wasabi;
    }

    /**
     * Returns Cloudinary.
     * This is a required field if source type is cloudinary.
     */
    public function getCloudinary(): ?Cloudinary2
    {
        return $this->cloudinary;
    }

    /**
     * Sets Cloudinary.
     * This is a required field if source type is cloudinary.
     *
     * @maps cloudinary
     */
    public function setCloudinary(?Cloudinary2 $cloudinary): void
    {
        $this->cloudinary = $cloudinary;
    }

    /**
     * Returns Azure.
     * This is a required field if source type is azure.
     */
    public function getAzure(): ?Azure2
    {
        return $this->azure;
    }

    /**
     * Sets Azure.
     * This is a required field if source type is azure.
     *
     * @maps azure
     */
    public function setAzure(?Azure2 $azure): void
    {
        $this->azure = $azure;
    }

    /**
     * Returns Linode.
     * This is a required field if source type is linode.
     */
    public function getLinode(): ?Linode2
    {
        return $this->linode;
    }

    /**
     * Sets Linode.
     * This is a required field if source type is linode.
     *
     * @maps linode
     */
    public function setLinode(?Linode2 $linode): void
    {
        $this->linode = $linode;
    }

    /**
     * Returns Backblaze.
     * This is a required field if source type is backblaze.
     */
    public function getBackblaze(): ?Backblaze2
    {
        return $this->backblaze;
    }

    /**
     * Sets Backblaze.
     * This is a required field if source type is backblaze.
     *
     * @maps backblaze
     */
    public function setBackblaze(?Backblaze2 $backblaze): void
    {
        $this->backblaze = $backblaze;
    }

    /**
     * Returns Cloudflare.
     * This is a required field if source type is cloudflare.
     */
    public function getCloudflare(): ?Cloudflare2
    {
        return $this->cloudflare;
    }

    /**
     * Sets Cloudflare.
     * This is a required field if source type is cloudflare.
     *
     * @maps cloudflare
     */
    public function setCloudflare(?Cloudflare2 $cloudflare): void
    {
        $this->cloudflare = $cloudflare;
    }

    /**
     * Converts the ImageSourcesRequest object to a human-readable string representation.
     *
     * @return string The string representation of the ImageSourcesRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ImageSourcesRequest',
            [
                'namespace' => $this->namespace,
                'type' => $this->type,
                'aws' => $this->aws,
                'proxy' => $this->proxy,
                'gcs' => $this->gcs,
                'dostorage' => $this->dostorage,
                'wasabi' => $this->wasabi,
                'cloudinary' => $this->cloudinary,
                'azure' => $this->azure,
                'linode' => $this->linode,
                'backblaze' => $this->backblaze,
                'cloudflare' => $this->cloudflare
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['namespace']      = $this->namespace;
        $json['type']           = Type2Enum::checkValue($this->type);
        if (isset($this->aws)) {
            $json['aws']        = $this->aws;
        }
        if (isset($this->proxy)) {
            $json['proxy']      = $this->proxy;
        }
        if (isset($this->gcs)) {
            $json['gcs']        = $this->gcs;
        }
        if (isset($this->dostorage)) {
            $json['dostorage']  = $this->dostorage;
        }
        if (isset($this->wasabi)) {
            $json['wasabi']     = $this->wasabi;
        }
        if (isset($this->cloudinary)) {
            $json['cloudinary'] = $this->cloudinary;
        }
        if (isset($this->azure)) {
            $json['azure']      = $this->azure;
        }
        if (isset($this->linode)) {
            $json['linode']     = $this->linode;
        }
        if (isset($this->backblaze)) {
            $json['backblaze']  = $this->backblaze;
        }
        if (isset($this->cloudflare)) {
            $json['cloudflare'] = $this->cloudflare;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
