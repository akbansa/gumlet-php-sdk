<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class Output2 implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $format;

    /**
     * @var string|null
     */
    private $statusUrl;

    /**
     * @var string|null
     */
    private $playbackUrl;

    /**
     * @var string|null
     */
    private $dashPlaybackUrl;

    /**
     * @var string[]|null
     */
    private $thumbnailUrl;

    /**
     * @var StorageDetails|null
     */
    private $storageDetails;

    /**
     * @var string|null
     */
    private $transcriptionWordLevelTimestamps;

    /**
     * @var int|null
     */
    private $storageBytes = 0;

    /**
     * @var string|null
     */
    private $previewThumbnailsUrl;

    /**
     * Returns Format.
     */
    public function getFormat(): ?string
    {
        return $this->format;
    }

    /**
     * Sets Format.
     *
     * @maps format
     */
    public function setFormat(?string $format): void
    {
        $this->format = $format;
    }

    /**
     * Returns Status Url.
     */
    public function getStatusUrl(): ?string
    {
        return $this->statusUrl;
    }

    /**
     * Sets Status Url.
     *
     * @maps status_url
     */
    public function setStatusUrl(?string $statusUrl): void
    {
        $this->statusUrl = $statusUrl;
    }

    /**
     * Returns Playback Url.
     */
    public function getPlaybackUrl(): ?string
    {
        return $this->playbackUrl;
    }

    /**
     * Sets Playback Url.
     *
     * @maps playback_url
     */
    public function setPlaybackUrl(?string $playbackUrl): void
    {
        $this->playbackUrl = $playbackUrl;
    }

    /**
     * Returns Dash Playback Url.
     */
    public function getDashPlaybackUrl(): ?string
    {
        return $this->dashPlaybackUrl;
    }

    /**
     * Sets Dash Playback Url.
     *
     * @maps dash_playback_url
     */
    public function setDashPlaybackUrl(?string $dashPlaybackUrl): void
    {
        $this->dashPlaybackUrl = $dashPlaybackUrl;
    }

    /**
     * Returns Thumbnail Url.
     *
     * @return string[]|null
     */
    public function getThumbnailUrl(): ?array
    {
        return $this->thumbnailUrl;
    }

    /**
     * Sets Thumbnail Url.
     *
     * @maps thumbnail_url
     *
     * @param string[]|null $thumbnailUrl
     */
    public function setThumbnailUrl(?array $thumbnailUrl): void
    {
        $this->thumbnailUrl = $thumbnailUrl;
    }

    /**
     * Returns Storage Details.
     */
    public function getStorageDetails(): ?StorageDetails
    {
        return $this->storageDetails;
    }

    /**
     * Sets Storage Details.
     *
     * @maps storage_details
     */
    public function setStorageDetails(?StorageDetails $storageDetails): void
    {
        $this->storageDetails = $storageDetails;
    }

    /**
     * Returns Transcription Word Level Timestamps.
     */
    public function getTranscriptionWordLevelTimestamps(): ?string
    {
        return $this->transcriptionWordLevelTimestamps;
    }

    /**
     * Sets Transcription Word Level Timestamps.
     *
     * @maps transcription_word_level_timestamps
     */
    public function setTranscriptionWordLevelTimestamps(?string $transcriptionWordLevelTimestamps): void
    {
        $this->transcriptionWordLevelTimestamps = $transcriptionWordLevelTimestamps;
    }

    /**
     * Returns Storage Bytes.
     */
    public function getStorageBytes(): ?int
    {
        return $this->storageBytes;
    }

    /**
     * Sets Storage Bytes.
     *
     * @maps storage_bytes
     */
    public function setStorageBytes(?int $storageBytes): void
    {
        $this->storageBytes = $storageBytes;
    }

    /**
     * Returns Preview Thumbnails Url.
     */
    public function getPreviewThumbnailsUrl(): ?string
    {
        return $this->previewThumbnailsUrl;
    }

    /**
     * Sets Preview Thumbnails Url.
     *
     * @maps preview_thumbnails_url
     */
    public function setPreviewThumbnailsUrl(?string $previewThumbnailsUrl): void
    {
        $this->previewThumbnailsUrl = $previewThumbnailsUrl;
    }

    /**
     * Converts the Output2 object to a human-readable string representation.
     *
     * @return string The string representation of the Output2 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Output2',
            [
                'format' => $this->format,
                'statusUrl' => $this->statusUrl,
                'playbackUrl' => $this->playbackUrl,
                'dashPlaybackUrl' => $this->dashPlaybackUrl,
                'thumbnailUrl' => $this->thumbnailUrl,
                'storageDetails' => $this->storageDetails,
                'transcriptionWordLevelTimestamps' => $this->transcriptionWordLevelTimestamps,
                'storageBytes' => $this->storageBytes,
                'previewThumbnailsUrl' => $this->previewThumbnailsUrl
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->format)) {
            $json['format']                              = $this->format;
        }
        if (isset($this->statusUrl)) {
            $json['status_url']                          = $this->statusUrl;
        }
        if (isset($this->playbackUrl)) {
            $json['playback_url']                        = $this->playbackUrl;
        }
        if (isset($this->dashPlaybackUrl)) {
            $json['dash_playback_url']                   = $this->dashPlaybackUrl;
        }
        if (isset($this->thumbnailUrl)) {
            $json['thumbnail_url']                       = $this->thumbnailUrl;
        }
        if (isset($this->storageDetails)) {
            $json['storage_details']                     = $this->storageDetails;
        }
        if (isset($this->transcriptionWordLevelTimestamps)) {
            $json['transcription_word_level_timestamps'] = $this->transcriptionWordLevelTimestamps;
        }
        if (isset($this->storageBytes)) {
            $json['storage_bytes']                       = $this->storageBytes;
        }
        if (isset($this->previewThumbnailsUrl)) {
            $json['preview_thumbnails_url']              = $this->previewThumbnailsUrl;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
