<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class Transformations1 implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $format;

    /**
     * @var string[]|null
     */
    private $resolution;

    /**
     * @var string[]|null
     */
    private $audioCodec;

    /**
     * @var string[]|null
     */
    private $videoCodec;

    /**
     * @var string[]|null
     */
    private $thumbnail;

    /**
     * @var string|null
     */
    private $thumbnailFormat;

    /**
     * @var bool|null
     */
    private $mp4Access = true;

    /**
     * @var bool|null
     */
    private $perTitleEncoding = true;

    /**
     * @var bool|null
     */
    private $originalDeleted = true;

    /**
     * Returns Format.
     */
    public function getFormat(): ?string
    {
        return $this->format;
    }

    /**
     * Sets Format.
     *
     * @maps format
     */
    public function setFormat(?string $format): void
    {
        $this->format = $format;
    }

    /**
     * Returns Resolution.
     *
     * @return string[]|null
     */
    public function getResolution(): ?array
    {
        return $this->resolution;
    }

    /**
     * Sets Resolution.
     *
     * @maps resolution
     *
     * @param string[]|null $resolution
     */
    public function setResolution(?array $resolution): void
    {
        $this->resolution = $resolution;
    }

    /**
     * Returns Audio Codec.
     *
     * @return string[]|null
     */
    public function getAudioCodec(): ?array
    {
        return $this->audioCodec;
    }

    /**
     * Sets Audio Codec.
     *
     * @maps audio_codec
     *
     * @param string[]|null $audioCodec
     */
    public function setAudioCodec(?array $audioCodec): void
    {
        $this->audioCodec = $audioCodec;
    }

    /**
     * Returns Video Codec.
     *
     * @return string[]|null
     */
    public function getVideoCodec(): ?array
    {
        return $this->videoCodec;
    }

    /**
     * Sets Video Codec.
     *
     * @maps video_codec
     *
     * @param string[]|null $videoCodec
     */
    public function setVideoCodec(?array $videoCodec): void
    {
        $this->videoCodec = $videoCodec;
    }

    /**
     * Returns Thumbnail.
     *
     * @return string[]|null
     */
    public function getThumbnail(): ?array
    {
        return $this->thumbnail;
    }

    /**
     * Sets Thumbnail.
     *
     * @maps thumbnail
     *
     * @param string[]|null $thumbnail
     */
    public function setThumbnail(?array $thumbnail): void
    {
        $this->thumbnail = $thumbnail;
    }

    /**
     * Returns Thumbnail Format.
     */
    public function getThumbnailFormat(): ?string
    {
        return $this->thumbnailFormat;
    }

    /**
     * Sets Thumbnail Format.
     *
     * @maps thumbnail_format
     */
    public function setThumbnailFormat(?string $thumbnailFormat): void
    {
        $this->thumbnailFormat = $thumbnailFormat;
    }

    /**
     * Returns Mp 4 Access.
     */
    public function getMp4Access(): ?bool
    {
        return $this->mp4Access;
    }

    /**
     * Sets Mp 4 Access.
     *
     * @maps mp4_access
     */
    public function setMp4Access(?bool $mp4Access): void
    {
        $this->mp4Access = $mp4Access;
    }

    /**
     * Returns Per Title Encoding.
     */
    public function getPerTitleEncoding(): ?bool
    {
        return $this->perTitleEncoding;
    }

    /**
     * Sets Per Title Encoding.
     *
     * @maps per_title_encoding
     */
    public function setPerTitleEncoding(?bool $perTitleEncoding): void
    {
        $this->perTitleEncoding = $perTitleEncoding;
    }

    /**
     * Returns Original Deleted.
     */
    public function getOriginalDeleted(): ?bool
    {
        return $this->originalDeleted;
    }

    /**
     * Sets Original Deleted.
     *
     * @maps original_deleted
     */
    public function setOriginalDeleted(?bool $originalDeleted): void
    {
        $this->originalDeleted = $originalDeleted;
    }

    /**
     * Converts the Transformations1 object to a human-readable string representation.
     *
     * @return string The string representation of the Transformations1 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Transformations1',
            [
                'format' => $this->format,
                'resolution' => $this->resolution,
                'audioCodec' => $this->audioCodec,
                'videoCodec' => $this->videoCodec,
                'thumbnail' => $this->thumbnail,
                'thumbnailFormat' => $this->thumbnailFormat,
                'mp4Access' => $this->mp4Access,
                'perTitleEncoding' => $this->perTitleEncoding,
                'originalDeleted' => $this->originalDeleted
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->format)) {
            $json['format']             = $this->format;
        }
        if (isset($this->resolution)) {
            $json['resolution']         = $this->resolution;
        }
        if (isset($this->audioCodec)) {
            $json['audio_codec']        = $this->audioCodec;
        }
        if (isset($this->videoCodec)) {
            $json['video_codec']        = $this->videoCodec;
        }
        if (isset($this->thumbnail)) {
            $json['thumbnail']          = $this->thumbnail;
        }
        if (isset($this->thumbnailFormat)) {
            $json['thumbnail_format']   = $this->thumbnailFormat;
        }
        if (isset($this->mp4Access)) {
            $json['mp4_access']         = $this->mp4Access;
        }
        if (isset($this->perTitleEncoding)) {
            $json['per_title_encoding'] = $this->perTitleEncoding;
        }
        if (isset($this->originalDeleted)) {
            $json['original_deleted']   = $this->originalDeleted;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
