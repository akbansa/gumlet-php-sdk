<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class VideoLiveAssetsRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $liveSourceId;

    /**
     * @var string
     */
    private $resolution;

    /**
     * @var string|null
     */
    private $title;

    /**
     * @var bool|null
     */
    private $mp4Access;

    /**
     * @param string $liveSourceId
     * @param string $resolution
     */
    public function __construct(string $liveSourceId, string $resolution)
    {
        $this->liveSourceId = $liveSourceId;
        $this->resolution = $resolution;
    }

    /**
     * Returns Live Source Id.
     * Gumlet live video source/collection id.
     */
    public function getLiveSourceId(): string
    {
        return $this->liveSourceId;
    }

    /**
     * Sets Live Source Id.
     * Gumlet live video source/collection id.
     *
     * @required
     * @maps live_source_id
     */
    public function setLiveSourceId(string $liveSourceId): void
    {
        $this->liveSourceId = $liveSourceId;
    }

    /**
     * Returns Resolution.
     * Required resolutions in HLS delivery format for live stream. Can be an array of string out of the
     * following values:  `240p`, `360p`, `480p`, `540p`, `720p`, and `1080p`. Re-sized rendition will
     * retain the input aspect ratio.
     */
    public function getResolution(): string
    {
        return $this->resolution;
    }

    /**
     * Sets Resolution.
     * Required resolutions in HLS delivery format for live stream. Can be an array of string out of the
     * following values:  `240p`, `360p`, `480p`, `540p`, `720p`, and `1080p`. Re-sized rendition will
     * retain the input aspect ratio.
     *
     * @required
     * @maps resolution
     */
    public function setResolution(string $resolution): void
    {
        $this->resolution = $resolution;
    }

    /**
     * Returns Title.
     * Your live stream asset title
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     * Your live stream asset title
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Mp 4 Access.
     * Creates <code>MP4</code> version for download purpose.
     */
    public function getMp4Access(): ?bool
    {
        return $this->mp4Access;
    }

    /**
     * Sets Mp 4 Access.
     * Creates <code>MP4</code> version for download purpose.
     *
     * @maps mp4_access
     */
    public function setMp4Access(?bool $mp4Access): void
    {
        $this->mp4Access = $mp4Access;
    }

    /**
     * Converts the VideoLiveAssetsRequest object to a human-readable string representation.
     *
     * @return string The string representation of the VideoLiveAssetsRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'VideoLiveAssetsRequest',
            [
                'liveSourceId' => $this->liveSourceId,
                'resolution' => $this->resolution,
                'title' => $this->title,
                'mp4Access' => $this->mp4Access
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['live_source_id'] = $this->liveSourceId;
        $json['resolution']     = $this->resolution;
        if (isset($this->title)) {
            $json['title']      = $this->title;
        }
        if (isset($this->mp4Access)) {
            $json['mp4_access'] = $this->mp4Access;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
