<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class InsightsChartDataRequest implements \JsonSerializable
{
    /**
     * @var string[]
     */
    private $metrics;

    /**
     * @var string
     */
    private $propertyId;

    /**
     * @var Timeframe
     */
    private $timeframe;

    /**
     * @var Filters1[]|null
     */
    private $filters;

    /**
     * @var string|null
     */
    private $groupBy = GroupByEnum::DAILY;

    /**
     * @param string[] $metrics
     * @param string $propertyId
     * @param Timeframe $timeframe
     */
    public function __construct(array $metrics, string $propertyId, Timeframe $timeframe)
    {
        $this->metrics = $metrics;
        $this->propertyId = $propertyId;
        $this->timeframe = $timeframe;
    }

    /**
     * Returns Metrics.
     * Get data for one or more `metrics` in the same request. Please add any of these metrics. `views`,
     * `unique_views`, `downscale_percentage`,`upscale_percentage`, `rebuffer_percentage`, `startup_time`,
     * `player_startup_time`, `seek_latency`, `exits_before_startup`, `playback_failure_percentage`,
     * `completion_percent`, `completion_percent_by_views`, `rebuffer_duration`, `playing_time`,
     * `rebuffer_count`, `rebuffer_frequency`, `average_bitrate`, `concurrent_users`, `playback_rate`
     *
     * @return string[]
     */
    public function getMetrics(): array
    {
        return $this->metrics;
    }

    /**
     * Sets Metrics.
     * Get data for one or more `metrics` in the same request. Please add any of these metrics. `views`,
     * `unique_views`, `downscale_percentage`,`upscale_percentage`, `rebuffer_percentage`, `startup_time`,
     * `player_startup_time`, `seek_latency`, `exits_before_startup`, `playback_failure_percentage`,
     * `completion_percent`, `completion_percent_by_views`, `rebuffer_duration`, `playing_time`,
     * `rebuffer_count`, `rebuffer_frequency`, `average_bitrate`, `concurrent_users`, `playback_rate`
     *
     * @required
     * @maps metrics
     *
     * @param string[] $metrics
     */
    public function setMetrics(array $metrics): void
    {
        $this->metrics = $metrics;
    }

    /**
     * Returns Property Id.
     * The five to ten character unique identifier of the Gumlet Insight Property available on the
     * dashboard.
     */
    public function getPropertyId(): string
    {
        return $this->propertyId;
    }

    /**
     * Sets Property Id.
     * The five to ten character unique identifier of the Gumlet Insight Property available on the
     * dashboard.
     *
     * @required
     * @maps property_id
     */
    public function setPropertyId(string $propertyId): void
    {
        $this->propertyId = $propertyId;
    }

    /**
     * Returns Timeframe.
     * The timeframe to get the data for. Currently we only support a maximum of *60 days* between
     * `start_at` and `end_at`. If `group_by` parameter is set as `hourly` then maximum difference between
     * `start_at` and `end_at` can be *seven days*.
     */
    public function getTimeframe(): Timeframe
    {
        return $this->timeframe;
    }

    /**
     * Sets Timeframe.
     * The timeframe to get the data for. Currently we only support a maximum of *60 days* between
     * `start_at` and `end_at`. If `group_by` parameter is set as `hourly` then maximum difference between
     * `start_at` and `end_at` can be *seven days*.
     *
     * @required
     * @maps timeframe
     */
    public function setTimeframe(Timeframe $timeframe): void
    {
        $this->timeframe = $timeframe;
    }

    /**
     * Returns Filters.
     * Build *segments* of users using multiple filters on the data, `value` should be an *exact match*
     *
     * @return Filters1[]|null
     */
    public function getFilters(): ?array
    {
        return $this->filters;
    }

    /**
     * Sets Filters.
     * Build *segments* of users using multiple filters on the data, `value` should be an *exact match*
     *
     * @maps filters
     *
     * @param Filters1[]|null $filters
     */
    public function setFilters(?array $filters): void
    {
        $this->filters = $filters;
    }

    /**
     * Returns Group By.
     * Data can be grouped by `daily` or `hourly`. Metrics with histogram response (`completion_percent`,
     * `completion_percent_by_views`) can not be grouped hourly
     */
    public function getGroupBy(): ?string
    {
        return $this->groupBy;
    }

    /**
     * Sets Group By.
     * Data can be grouped by `daily` or `hourly`. Metrics with histogram response (`completion_percent`,
     * `completion_percent_by_views`) can not be grouped hourly
     *
     * @maps group_by
     * @factory \GumletRestApisLib\Models\GroupByEnum::checkValue
     */
    public function setGroupBy(?string $groupBy): void
    {
        $this->groupBy = $groupBy;
    }

    /**
     * Converts the InsightsChartDataRequest object to a human-readable string representation.
     *
     * @return string The string representation of the InsightsChartDataRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'InsightsChartDataRequest',
            [
                'metrics' => $this->metrics,
                'propertyId' => $this->propertyId,
                'timeframe' => $this->timeframe,
                'filters' => $this->filters,
                'groupBy' => $this->groupBy
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['metrics']      = $this->metrics;
        $json['property_id']  = $this->propertyId;
        $json['timeframe']    = $this->timeframe;
        if (isset($this->filters)) {
            $json['filters']  = $this->filters;
        }
        if (isset($this->groupBy)) {
            $json['group_by'] = GroupByEnum::checkValue($this->groupBy);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
