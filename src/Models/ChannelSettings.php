<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class ChannelSettings implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $title;

    /**
     * @var bool|null
     */
    private $active = true;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $privacyType;

    /**
     * @var bool|null
     */
    private $customLogo = true;

    /**
     * @var string|null
     */
    private $logoUrl;

    /**
     * @var string[]|null
     */
    private $cname;

    /**
     * @var string[]|null
     */
    private $tempCname;

    /**
     * Returns Title.
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Active.
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * Sets Active.
     *
     * @maps active
     */
    public function setActive(?bool $active): void
    {
        $this->active = $active;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Privacy Type.
     */
    public function getPrivacyType(): ?string
    {
        return $this->privacyType;
    }

    /**
     * Sets Privacy Type.
     *
     * @maps privacy_type
     */
    public function setPrivacyType(?string $privacyType): void
    {
        $this->privacyType = $privacyType;
    }

    /**
     * Returns Custom Logo.
     */
    public function getCustomLogo(): ?bool
    {
        return $this->customLogo;
    }

    /**
     * Sets Custom Logo.
     *
     * @maps custom_logo
     */
    public function setCustomLogo(?bool $customLogo): void
    {
        $this->customLogo = $customLogo;
    }

    /**
     * Returns Logo Url.
     */
    public function getLogoUrl(): ?string
    {
        return $this->logoUrl;
    }

    /**
     * Sets Logo Url.
     *
     * @maps logo_url
     */
    public function setLogoUrl(?string $logoUrl): void
    {
        $this->logoUrl = $logoUrl;
    }

    /**
     * Returns Cname.
     *
     * @return string[]|null
     */
    public function getCname(): ?array
    {
        return $this->cname;
    }

    /**
     * Sets Cname.
     *
     * @maps cname
     *
     * @param string[]|null $cname
     */
    public function setCname(?array $cname): void
    {
        $this->cname = $cname;
    }

    /**
     * Returns Temp Cname.
     *
     * @return string[]|null
     */
    public function getTempCname(): ?array
    {
        return $this->tempCname;
    }

    /**
     * Sets Temp Cname.
     *
     * @maps temp_cname
     *
     * @param string[]|null $tempCname
     */
    public function setTempCname(?array $tempCname): void
    {
        $this->tempCname = $tempCname;
    }

    /**
     * Converts the ChannelSettings object to a human-readable string representation.
     *
     * @return string The string representation of the ChannelSettings object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ChannelSettings',
            [
                'title' => $this->title,
                'active' => $this->active,
                'description' => $this->description,
                'privacyType' => $this->privacyType,
                'customLogo' => $this->customLogo,
                'logoUrl' => $this->logoUrl,
                'cname' => $this->cname,
                'tempCname' => $this->tempCname
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->title)) {
            $json['title']        = $this->title;
        }
        if (isset($this->active)) {
            $json['active']       = $this->active;
        }
        if (isset($this->description)) {
            $json['description']  = $this->description;
        }
        if (isset($this->privacyType)) {
            $json['privacy_type'] = $this->privacyType;
        }
        if (isset($this->customLogo)) {
            $json['custom_logo']  = $this->customLogo;
        }
        if (isset($this->logoUrl)) {
            $json['logo_url']     = $this->logoUrl;
        }
        if (isset($this->cname)) {
            $json['cname']        = $this->cname;
        }
        if (isset($this->tempCname)) {
            $json['temp_cname']   = $this->tempCname;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
