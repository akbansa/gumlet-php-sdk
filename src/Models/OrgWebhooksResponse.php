<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class OrgWebhooksResponse implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $url;

    /**
     * @var string[]|null
     */
    private $triggers;

    /**
     * @var string|null
     */
    private $createdAt;

    /**
     * @var string|null
     */
    private $updatedAt;

    /**
     * @var string[]|null
     */
    private $sources;

    /**
     * @var string|null
     */
    private $secretToken;

    /**
     * Returns Id.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Url.
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     *
     * @maps url
     */
    public function setUrl(?string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Triggers.
     *
     * @return string[]|null
     */
    public function getTriggers(): ?array
    {
        return $this->triggers;
    }

    /**
     * Sets Triggers.
     *
     * @maps triggers
     *
     * @param string[]|null $triggers
     */
    public function setTriggers(?array $triggers): void
    {
        $this->triggers = $triggers;
    }

    /**
     * Returns Created At.
     */
    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    /**
     * Sets Created At.
     *
     * @maps created_at
     */
    public function setCreatedAt(?string $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Returns Updated At.
     */
    public function getUpdatedAt(): ?string
    {
        return $this->updatedAt;
    }

    /**
     * Sets Updated At.
     *
     * @maps updated_at
     */
    public function setUpdatedAt(?string $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * Returns Sources.
     *
     * @return string[]|null
     */
    public function getSources(): ?array
    {
        return $this->sources;
    }

    /**
     * Sets Sources.
     *
     * @maps sources
     *
     * @param string[]|null $sources
     */
    public function setSources(?array $sources): void
    {
        $this->sources = $sources;
    }

    /**
     * Returns Secret Token.
     */
    public function getSecretToken(): ?string
    {
        return $this->secretToken;
    }

    /**
     * Sets Secret Token.
     *
     * @maps secret_token
     */
    public function setSecretToken(?string $secretToken): void
    {
        $this->secretToken = $secretToken;
    }

    /**
     * Converts the OrgWebhooksResponse object to a human-readable string representation.
     *
     * @return string The string representation of the OrgWebhooksResponse object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'OrgWebhooksResponse',
            [
                'id' => $this->id,
                'url' => $this->url,
                'triggers' => $this->triggers,
                'createdAt' => $this->createdAt,
                'updatedAt' => $this->updatedAt,
                'sources' => $this->sources,
                'secretToken' => $this->secretToken
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']           = $this->id;
        }
        if (isset($this->url)) {
            $json['url']          = $this->url;
        }
        if (isset($this->triggers)) {
            $json['triggers']     = $this->triggers;
        }
        if (isset($this->createdAt)) {
            $json['created_at']   = $this->createdAt;
        }
        if (isset($this->updatedAt)) {
            $json['updated_at']   = $this->updatedAt;
        }
        if (isset($this->sources)) {
            $json['sources']      = $this->sources;
        }
        if (isset($this->secretToken)) {
            $json['secret_token'] = $this->secretToken;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
