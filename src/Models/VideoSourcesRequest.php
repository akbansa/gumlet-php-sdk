<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Models;

use GumletRestApisLib\ApiHelper;
use stdClass;

class VideoSourcesRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string|null
     */
    private $defaultProfileId;

    /**
     * @var string|null
     */
    private $insightPropertyId;

    /**
     * @var VideoProtection1|null
     */
    private $videoProtection;

    /**
     * @var Aws1|null
     */
    private $aws;

    /**
     * @var Proxy|null
     */
    private $proxy;

    /**
     * @var Gcs|null
     */
    private $gcs;

    /**
     * @var Dostorage|null
     */
    private $dostorage;

    /**
     * @var Wasabi|null
     */
    private $wasabi;

    /**
     * @var Cloudinary|null
     */
    private $cloudinary;

    /**
     * @var Azure|null
     */
    private $azure;

    /**
     * @var Linode|null
     */
    private $linode;

    /**
     * @var Backblaze|null
     */
    private $backblaze;

    /**
     * @var Cloudflare|null
     */
    private $cloudflare;

    /**
     * @var Zoom|null
     */
    private $zoom;

    /**
     * @param string $name
     * @param string $type
     */
    public function __construct(string $name, string $type)
    {
        $this->name = $name;
        $this->type = $type;
    }

    /**
     * Returns Name.
     * Specify a text string or identifier for the collection.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Specify a text string or identifier for the collection.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Type.
     * Video collections are top-level entities in Gumlet. You can use them to organize videos for
     * different teams/departments or use cases.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Video collections are top-level entities in Gumlet. You can use them to organize videos for
     * different teams/departments or use cases.
     *
     * @required
     * @maps type
     * @factory \GumletRestApisLib\Models\TypeEnum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Default Profile Id.
     * Gumlet provides the functionality of creating multiple video assets using the same set of parameters.
     */
    public function getDefaultProfileId(): ?string
    {
        return $this->defaultProfileId;
    }

    /**
     * Sets Default Profile Id.
     * Gumlet provides the functionality of creating multiple video assets using the same set of parameters.
     *
     * @maps default_profile_id
     */
    public function setDefaultProfileId(?string $defaultProfileId): void
    {
        $this->defaultProfileId = $defaultProfileId;
    }

    /**
     * Returns Insight Property Id.
     * The five to ten character unique identifier of the Gumlet Insight Property available on the
     * dashboard.
     */
    public function getInsightPropertyId(): ?string
    {
        return $this->insightPropertyId;
    }

    /**
     * Sets Insight Property Id.
     * The five to ten character unique identifier of the Gumlet Insight Property available on the
     * dashboard.
     *
     * @maps insight_property_id
     */
    public function setInsightPropertyId(?string $insightPropertyId): void
    {
        $this->insightPropertyId = $insightPropertyId;
    }

    /**
     * Returns Video Protection.
     * Gumlet provides multiple options for securing your video playback.
     */
    public function getVideoProtection(): ?VideoProtection1
    {
        return $this->videoProtection;
    }

    /**
     * Sets Video Protection.
     * Gumlet provides multiple options for securing your video playback.
     *
     * @maps video_protection
     */
    public function setVideoProtection(?VideoProtection1 $videoProtection): void
    {
        $this->videoProtection = $videoProtection;
    }

    /**
     * Returns Aws.
     * This is a required field if collection type is aws.
     */
    public function getAws(): ?Aws1
    {
        return $this->aws;
    }

    /**
     * Sets Aws.
     * This is a required field if collection type is aws.
     *
     * @maps aws
     */
    public function setAws(?Aws1 $aws): void
    {
        $this->aws = $aws;
    }

    /**
     * Returns Proxy.
     * This is a required field if collection type is proxy.
     */
    public function getProxy(): ?Proxy
    {
        return $this->proxy;
    }

    /**
     * Sets Proxy.
     * This is a required field if collection type is proxy.
     *
     * @maps proxy
     */
    public function setProxy(?Proxy $proxy): void
    {
        $this->proxy = $proxy;
    }

    /**
     * Returns Gcs.
     * This is a required field if collection type is gcs.
     */
    public function getGcs(): ?Gcs
    {
        return $this->gcs;
    }

    /**
     * Sets Gcs.
     * This is a required field if collection type is gcs.
     *
     * @maps gcs
     */
    public function setGcs(?Gcs $gcs): void
    {
        $this->gcs = $gcs;
    }

    /**
     * Returns Dostorage.
     * This is a required field if collection type is dostorage.
     */
    public function getDostorage(): ?Dostorage
    {
        return $this->dostorage;
    }

    /**
     * Sets Dostorage.
     * This is a required field if collection type is dostorage.
     *
     * @maps dostorage
     */
    public function setDostorage(?Dostorage $dostorage): void
    {
        $this->dostorage = $dostorage;
    }

    /**
     * Returns Wasabi.
     * This is a required field if collection type is wasabi.
     */
    public function getWasabi(): ?Wasabi
    {
        return $this->wasabi;
    }

    /**
     * Sets Wasabi.
     * This is a required field if collection type is wasabi.
     *
     * @maps wasabi
     */
    public function setWasabi(?Wasabi $wasabi): void
    {
        $this->wasabi = $wasabi;
    }

    /**
     * Returns Cloudinary.
     * This is a required field if collection type is cloudinary.
     */
    public function getCloudinary(): ?Cloudinary
    {
        return $this->cloudinary;
    }

    /**
     * Sets Cloudinary.
     * This is a required field if collection type is cloudinary.
     *
     * @maps cloudinary
     */
    public function setCloudinary(?Cloudinary $cloudinary): void
    {
        $this->cloudinary = $cloudinary;
    }

    /**
     * Returns Azure.
     * This is a required field if collection type is azure.
     */
    public function getAzure(): ?Azure
    {
        return $this->azure;
    }

    /**
     * Sets Azure.
     * This is a required field if collection type is azure.
     *
     * @maps azure
     */
    public function setAzure(?Azure $azure): void
    {
        $this->azure = $azure;
    }

    /**
     * Returns Linode.
     * This is a required field if collection type is linode.
     */
    public function getLinode(): ?Linode
    {
        return $this->linode;
    }

    /**
     * Sets Linode.
     * This is a required field if collection type is linode.
     *
     * @maps linode
     */
    public function setLinode(?Linode $linode): void
    {
        $this->linode = $linode;
    }

    /**
     * Returns Backblaze.
     * This is a required field if collection type is backblaze.
     */
    public function getBackblaze(): ?Backblaze
    {
        return $this->backblaze;
    }

    /**
     * Sets Backblaze.
     * This is a required field if collection type is backblaze.
     *
     * @maps backblaze
     */
    public function setBackblaze(?Backblaze $backblaze): void
    {
        $this->backblaze = $backblaze;
    }

    /**
     * Returns Cloudflare.
     * This is a required field if collection type is cloudflare.
     */
    public function getCloudflare(): ?Cloudflare
    {
        return $this->cloudflare;
    }

    /**
     * Sets Cloudflare.
     * This is a required field if collection type is cloudflare.
     *
     * @maps cloudflare
     */
    public function setCloudflare(?Cloudflare $cloudflare): void
    {
        $this->cloudflare = $cloudflare;
    }

    /**
     * Returns Zoom.
     * This is a required field if collection type is zoom.
     */
    public function getZoom(): ?Zoom
    {
        return $this->zoom;
    }

    /**
     * Sets Zoom.
     * This is a required field if collection type is zoom.
     *
     * @maps zoom
     */
    public function setZoom(?Zoom $zoom): void
    {
        $this->zoom = $zoom;
    }

    /**
     * Converts the VideoSourcesRequest object to a human-readable string representation.
     *
     * @return string The string representation of the VideoSourcesRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'VideoSourcesRequest',
            [
                'name' => $this->name,
                'type' => $this->type,
                'defaultProfileId' => $this->defaultProfileId,
                'insightPropertyId' => $this->insightPropertyId,
                'videoProtection' => $this->videoProtection,
                'aws' => $this->aws,
                'proxy' => $this->proxy,
                'gcs' => $this->gcs,
                'dostorage' => $this->dostorage,
                'wasabi' => $this->wasabi,
                'cloudinary' => $this->cloudinary,
                'azure' => $this->azure,
                'linode' => $this->linode,
                'backblaze' => $this->backblaze,
                'cloudflare' => $this->cloudflare,
                'zoom' => $this->zoom
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['name']                    = $this->name;
        $json['type']                    = TypeEnum::checkValue($this->type);
        if (isset($this->defaultProfileId)) {
            $json['default_profile_id']  = $this->defaultProfileId;
        }
        if (isset($this->insightPropertyId)) {
            $json['insight_property_id'] = $this->insightPropertyId;
        }
        if (isset($this->videoProtection)) {
            $json['video_protection']    = $this->videoProtection;
        }
        if (isset($this->aws)) {
            $json['aws']                 = $this->aws;
        }
        if (isset($this->proxy)) {
            $json['proxy']               = $this->proxy;
        }
        if (isset($this->gcs)) {
            $json['gcs']                 = $this->gcs;
        }
        if (isset($this->dostorage)) {
            $json['dostorage']           = $this->dostorage;
        }
        if (isset($this->wasabi)) {
            $json['wasabi']              = $this->wasabi;
        }
        if (isset($this->cloudinary)) {
            $json['cloudinary']          = $this->cloudinary;
        }
        if (isset($this->azure)) {
            $json['azure']               = $this->azure;
        }
        if (isset($this->linode)) {
            $json['linode']              = $this->linode;
        }
        if (isset($this->backblaze)) {
            $json['backblaze']           = $this->backblaze;
        }
        if (isset($this->cloudflare)) {
            $json['cloudflare']          = $this->cloudflare;
        }
        if (isset($this->zoom)) {
            $json['zoom']                = $this->zoom;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
