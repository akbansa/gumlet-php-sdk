<?php

declare(strict_types=1);

/*
 * GumletRestApisLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GumletRestApisLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use GumletRestApisLib\Exceptions\ApiException;
use GumletRestApisLib\Exceptions\ImageAnalytics400ErrorException;
use GumletRestApisLib\Exceptions\ImageSources400Error3Exception;
use GumletRestApisLib\Exceptions\ImageSources400ErrorException;
use GumletRestApisLib\Exceptions\InsightsAggregatedData400ErrorException;
use GumletRestApisLib\Exceptions\InsightsAggregatedData401ErrorException;
use GumletRestApisLib\Exceptions\InsightsBreakdownData400ErrorException;
use GumletRestApisLib\Exceptions\InsightsBreakdownData401ErrorException;
use GumletRestApisLib\Exceptions\InsightsChartData400ErrorException;
use GumletRestApisLib\Exceptions\InsightsChartData401ErrorException;
use GumletRestApisLib\Exceptions\VideoAnalytics400ErrorException;
use GumletRestApisLib\Exceptions\VideoAssets400ErrorException;
use GumletRestApisLib\Exceptions\VideoAssets401ErrorException;
use GumletRestApisLib\Exceptions\VideoAssetsList400ErrorException;
use GumletRestApisLib\Exceptions\VideoAssetsList401ErrorException;
use GumletRestApisLib\Exceptions\VideoAssetsUpload400ErrorException;
use GumletRestApisLib\Exceptions\VideoAssetsUpload401ErrorException;
use GumletRestApisLib\Exceptions\VideoLiveAssets400ErrorException;
use GumletRestApisLib\Exceptions\VideoLiveAssets401ErrorException;
use GumletRestApisLib\Exceptions\VideoLiveAssetsComplete400ErrorException;
use GumletRestApisLib\Exceptions\VideoLiveAssetsCOPY400ErrorException;
use GumletRestApisLib\Exceptions\VideoLiveAssetsCOPY401ErrorException;
use GumletRestApisLib\Exceptions\VideoLiveAssetsList400ErrorException;
use GumletRestApisLib\Exceptions\VideoLiveAssetsList401ErrorException;
use GumletRestApisLib\Exceptions\VideoLiveAssetsUpdate400ErrorException;
use GumletRestApisLib\Exceptions\VideoLiveAssetsUpdate401ErrorException;
use GumletRestApisLib\Exceptions\VideoPlaylist400Error3Exception;
use GumletRestApisLib\Exceptions\VideoPlaylist400ErrorException;
use GumletRestApisLib\Exceptions\VideoPlaylistAsset400ErrorException;
use GumletRestApisLib\Exceptions\VideoPlaylistAssets400ErrorException;
use GumletRestApisLib\Exceptions\VideoProfiles400ErrorException;
use GumletRestApisLib\Exceptions\VideoProfiles401ErrorException;
use GumletRestApisLib\Exceptions\VideoSources400Error3Exception;
use GumletRestApisLib\Exceptions\VideoSources400ErrorException;
use GumletRestApisLib\Exceptions\VideoStreamingDuration400ErrorException;
use GumletRestApisLib\Models\ImageAnalyticsRequest;
use GumletRestApisLib\Models\ImageAnalyticsResponse;
use GumletRestApisLib\Models\ImageSourcesRequest;
use GumletRestApisLib\Models\ImageSourcesRequest1;
use GumletRestApisLib\Models\ImageSourcesResponse;
use GumletRestApisLib\Models\ImageSourcesResponse1;
use GumletRestApisLib\Models\ImageSourcesResponse2;
use GumletRestApisLib\Models\InsightsAggregatedDataRequest;
use GumletRestApisLib\Models\InsightsAggregatedDataResponse;
use GumletRestApisLib\Models\InsightsBreakdownDataRequest;
use GumletRestApisLib\Models\InsightsBreakdownDataResponse;
use GumletRestApisLib\Models\InsightsChartDataRequest;
use GumletRestApisLib\Models\InsightsChartDataResponse;
use GumletRestApisLib\Models\OrderByEnum;
use GumletRestApisLib\Models\OrgWebhooksRequest;
use GumletRestApisLib\Models\OrgWebhooksRequest1;
use GumletRestApisLib\Models\OrgWebhooksResponse;
use GumletRestApisLib\Models\PurgeRequest;
use GumletRestApisLib\Models\SortByEnum;
use GumletRestApisLib\Models\StatusEnum;
use GumletRestApisLib\Models\VideoAnalyticsRequest;
use GumletRestApisLib\Models\VideoAnalyticsResponse;
use GumletRestApisLib\Models\VideoAssetsChaptersRequest;
use GumletRestApisLib\Models\VideoAssetsListResponse;
use GumletRestApisLib\Models\VideoAssetsMultipartuploadCompleteRequest;
use GumletRestApisLib\Models\VideoAssetsMultipartuploadSignResponse;
use GumletRestApisLib\Models\VideoAssetsRequest;
use GumletRestApisLib\Models\VideoAssetsResponse;
use GumletRestApisLib\Models\VideoAssetsResponse1;
use GumletRestApisLib\Models\VideoAssetsSubtitleUploadEventRequest;
use GumletRestApisLib\Models\VideoAssetsSubtitleUploadRequest;
use GumletRestApisLib\Models\VideoAssetsThumbnailRequest;
use GumletRestApisLib\Models\VideoAssetsUpdateRequest;
use GumletRestApisLib\Models\VideoAssetsUploadRequest;
use GumletRestApisLib\Models\VideoAssetsUploadResponse;
use GumletRestApisLib\Models\VideoLiveAssetsCOPYResponse;
use GumletRestApisLib\Models\VideoLiveAssetsListResponse;
use GumletRestApisLib\Models\VideoLiveAssetsRequest;
use GumletRestApisLib\Models\VideoLiveAssetsResponse;
use GumletRestApisLib\Models\VideoLiveAssetsUpdateRequest;
use GumletRestApisLib\Models\VideoLiveAssetsUpdateResponse;
use GumletRestApisLib\Models\VideoPlaylistAssetRequest;
use GumletRestApisLib\Models\VideoPlaylistAssetRequest1;
use GumletRestApisLib\Models\VideoPlaylistAssetResponse;
use GumletRestApisLib\Models\VideoPlaylistAssetsResponse;
use GumletRestApisLib\Models\VideoPlaylistRequest;
use GumletRestApisLib\Models\VideoPlaylistRequest1;
use GumletRestApisLib\Models\VideoPlaylistResponse;
use GumletRestApisLib\Models\VideoPlaylistResponse1;
use GumletRestApisLib\Models\VideoProfilesRequest;
use GumletRestApisLib\Models\VideoProfilesRequest1;
use GumletRestApisLib\Models\VideoProfilesResponse;
use GumletRestApisLib\Models\VideoProfilesResponse1;
use GumletRestApisLib\Models\VideoProfilesResponse2;
use GumletRestApisLib\Models\VideoSourcesRequest;
use GumletRestApisLib\Models\VideoSourcesRequest1;
use GumletRestApisLib\Models\VideoSourcesResponse;
use GumletRestApisLib\Models\VideoSourcesResponse1;
use GumletRestApisLib\Models\VideoSourcesResponse2;
use GumletRestApisLib\Models\VideoStreamingDurationResponse;

class APIEndpointsController extends BaseController
{
    /**
     * This endpoint list video collection which are assigned to the user or token.
     *
     * @return VideoSourcesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listCollections(): VideoSourcesResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/sources')->auth('sec0');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400'))
            ->type(VideoSourcesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Video collections are top-level entities in Gumlet. You can use them to organize videos for
     * different teams/departments or use cases.
     *
     * @param VideoSourcesRequest|null $body
     *
     * @return VideoSourcesResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createCollection(?VideoSourcesRequest $body = null): VideoSourcesResponse1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/sources')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoSources400ErrorException::class))
            ->type(VideoSourcesResponse1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * An asset refers to a media content/video that is processed, stored, and delivered through Gumlet.
     * This endpoint creates an asset allowing users to ingest media content into the Gumlet system for
     * processing and delivery.
     *
     * @param VideoAssetsRequest|null $body
     *
     * @return VideoAssetsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createAsset(?VideoAssetsRequest $body = null): VideoAssetsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/assets')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoAssets400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoAssets401ErrorException::class))
            ->type(VideoAssetsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint creates a video asset allowing to upload of the video from the local file system and
     * ingest media content into the Gumlet system for processing and delivery.Body Parameters are the same
     * as the Create Asset Body Parameters except for the `input` parameter which this endpoint does not
     * take.A successful response will be returned with `upload_url` field. You can make `PUT` request to
     * that URL to upload video. To upload video using `upload_url` refer to [this](https://docs.gumlet.
     * com/docs/direct-upload#2-use-the-url-to-upload-a-file).
     *
     * @param VideoAssetsUploadRequest|null $body
     *
     * @return VideoAssetsUploadResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createAssetDirectUpload(?VideoAssetsUploadRequest $body = null): VideoAssetsUploadResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/assets/upload')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoAssetsUpload400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoAssetsUpload401ErrorException::class))
            ->type(VideoAssetsUploadResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint retrieves the details of an asset that has previously been created.
     *
     * @param string $assetId An asset id for the previously created asset.
     *
     * @return VideoAssetsResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAssetStatus(string $assetId): VideoAssetsResponse1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/assets/{asset_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('asset_id', $assetId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoAssets400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoAssets401ErrorException::class))
            ->type(VideoAssetsResponse1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint removes an asset given its unique asset id. The asset will be removed from storage as
     * well, associated URLs will be inaccessible.
     *
     * @param string $assetId Asset id of the video asset which needs to be deleted.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteAsset(string $assetId)
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/video/assets/{asset_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('asset_id', $assetId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoAssets400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoAssets401ErrorException::class));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows users to update video asset that has previously been created.
     *
     * @param VideoAssetsUpdateRequest|null $body
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateAsset(?VideoAssetsUpdateRequest $body = null): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/assets/update')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint list assets in video collection. You can also pass `status` and `tag` to filter assets.
     *
     * @param string $collectionId Gumlet video collection id.
     * @param string|null $status To filter assets on the basis of their current status. Can be
     *        specified as a single status value string or comma-separated status values. The
     *        status value can be one of `queued`, `processing`, `ready`, `errored`, and `deleted`.
     * @param string|null $tag Input tag on the basis of which assets need to be filtered. To filter
     *        on multiple tags use comma-separated string.
     * @param string|null $title Title on the basis of which assets need to be filtered.
     * @param string|null $folder Folder name on the basis of which assets need to be filtered.
     * @param string|null $offset Offset value for a paginated list of assets.
     * @param string|null $size Page size for the paginated list. **Default: `10`** **Max Size:
     *        `100`**
     * @param string|null $playlistId filter assets from a playlist.
     * @param string|null $sortBy assets will be sorted based on the provided field.
     * @param string|null $orderBy assets will be sorted in the specified order based on provided
     *        sortBy field or by default createAt field.
     *
     * @return VideoAssetsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAssets(
        string $collectionId,
        ?string $status = null,
        ?string $tag = null,
        ?string $title = null,
        ?string $folder = null,
        ?string $offset = null,
        ?string $size = null,
        ?string $playlistId = null,
        ?string $sortBy = null,
        ?string $orderBy = OrderByEnum::DESC
    ): VideoAssetsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/assets/list/{collection_id}')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('collection_id', $collectionId),
                QueryParam::init('status', $status)->serializeBy([StatusEnum::class, 'checkValue']),
                QueryParam::init('tag', $tag),
                QueryParam::init('title', $title),
                QueryParam::init('folder', $folder),
                QueryParam::init('offset', $offset),
                QueryParam::init('size', $size),
                QueryParam::init('playlist_id', $playlistId),
                QueryParam::init('sortBy', $sortBy)->serializeBy([SortByEnum::class, 'checkValue']),
                QueryParam::init('orderBy', $orderBy)->serializeBy([OrderByEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoAssetsList400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoAssetsList401ErrorException::class))
            ->type(VideoAssetsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Select frame from video to use as thumbnail
     *
     * @param string $assetId Asset id of the video asset which needs to be deleted.
     * @param VideoAssetsThumbnailRequest|null $body
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function selectFromVideo(string $assetId, ?VideoAssetsThumbnailRequest $body = null)
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/assets/{asset_id}/thumbnail')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('asset_id', $assetId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        return $this->execute($_reqBuilder);
    }

    /**
     * Use any image file to use as thumbnail
     *
     * @param string $assetID An asset id for the previously created asset.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function selectFromImageFile(string $assetID)
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/assets/{asset_ID}/thumbnail')
            ->auth('sec0')
            ->parameters(TemplateParam::init('asset_ID', $assetID));

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Upload your subtitled .srt file to your video asset.
     *
     * @param string $assetID An asset id for the previously created asset.
     * @param VideoAssetsSubtitleUploadRequest|null $body
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function videoAssetUploadSubtitle(string $assetID, ?VideoAssetsSubtitleUploadRequest $body = null)
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/assets/{asset_ID}/subtitle/upload')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('asset_ID', $assetID),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $assetID An asset id for the previously created asset.
     * @param VideoAssetsSubtitleUploadEventRequest|null $body
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadSubtitleCompletion(
        string $assetID,
        ?VideoAssetsSubtitleUploadEventRequest $body = null
    ): array {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/assets/{asset_ID}/subtitle/upload/event')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('asset_ID', $assetID),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint will create/update video asset chapters.
     *
     * @param string $assetId
     * @param VideoAssetsChaptersRequest|null $body
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createUpdateChapter(string $assetId, ?VideoAssetsChaptersRequest $body = null): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/assets/{asset_id}/chapters')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('asset_id', $assetId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint gives usage analytics data of your videos. Ex - top assets, bandwidth consumption
     *
     * @param VideoAnalyticsRequest|null $body
     *
     * @return VideoAnalyticsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function videoAnalytics(?VideoAnalyticsRequest $body = null): VideoAnalyticsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/analytics')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoAnalytics400ErrorException::class))
            ->type(VideoAnalyticsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint lists top streamed assets in a video collection
     *
     * @param string $startAt Date string in "yyyy-mm-dd" format
     * @param string $endAt Date string in "yyyy-mm-dd" format
     * @param string|null $collectionId
     * @param string|null $page
     * @param string|null $pageSize
     *
     * @return VideoStreamingDurationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function streamingDuration(
        string $startAt,
        string $endAt,
        ?string $collectionId = null,
        ?string $page = null,
        ?string $pageSize = '1000'
    ): VideoStreamingDurationResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/streaming-duration')
            ->auth('sec0')
            ->parameters(
                QueryParam::init('start_at', $startAt),
                QueryParam::init('end_at', $endAt),
                QueryParam::init('collection_id', $collectionId),
                QueryParam::init('page', $page),
                QueryParam::init('page_size', $pageSize)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoStreamingDuration400ErrorException::class))
            ->type(VideoStreamingDurationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Use this endpoint to retrieve pre-signed upload URL for each part.
     *
     * @param string $assetId An asset id of the created asset for which you are uploading parts
     * @param string $partNumber Part number of multiple parts of the original video which you you
     *        are uploading
     *
     * @return VideoAssetsMultipartuploadSignResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function signPart(string $assetId, string $partNumber): VideoAssetsMultipartuploadSignResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/video/assets/{asset_id}/multipartupload/{part_number}/sign'
        )
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('asset_id', $assetId),
                TemplateParam::init('part_number', $partNumber)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400'))
            ->type(VideoAssetsMultipartuploadSignResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Once you upload all parts to S3 bucket via pre-signed URL, use this endpoint to complete the
     * multipart upload.
     *
     * @param string $assetId An asset id for which you are uploading original video via multipart
     * @param VideoAssetsMultipartuploadCompleteRequest|null $body
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function completeMultipartUpload(
        string $assetId,
        ?VideoAssetsMultipartuploadCompleteRequest $body = null
    ): array {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/video/assets/{asset_id}/multipartupload/complete'
        )
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('asset_id', $assetId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Gumlet provides the functionality of creating multiple video assets using the same set of parameters.
     * A Video profile is a set of parameters that can be referenced/used while creating a video as a
     * single parameter.
     *
     * @param VideoProfilesRequest|null $body
     *
     * @return VideoProfilesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createProfile(?VideoProfilesRequest $body = null): VideoProfilesResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/profiles')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoProfiles400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoProfiles401ErrorException::class))
            ->type(VideoProfilesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint retrieves the details of all profiles that have previously been created.
     *
     * @param int|null $offset Offset value for a paginated list of profiles. Can be zero for the
     *        first time and `current_offset` value received from the last request afterwards.
     * @param int|null $size Page size for the paginated list. **Default: `10`**
     *
     * @return VideoProfilesResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listProfiles(?int $offset = null, ?int $size = null): VideoProfilesResponse1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/profiles')
            ->auth('sec0')
            ->parameters(QueryParam::init('offset', $offset), QueryParam::init('size', $size));

        $_resHandler = $this->responseHandler()->type(VideoProfilesResponse1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update an existing profile. Settings provided in body parameters will only be updated in the
     * existing profile.
     *
     * @param string $profileId Profile id of the profile which need to be updated.
     * @param VideoProfilesRequest1|null $body
     *
     * @return VideoProfilesResponse2 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateProfile(string $profileId, ?VideoProfilesRequest1 $body = null): VideoProfilesResponse2
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/profiles/{profile_id}')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('profile_id', $profileId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('402', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('403', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('404', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('405', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('406', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('407', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('408', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('409', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('410', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('411', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('412', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('413', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('414', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('415', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('416', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('417', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('418', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('419', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('420', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('421', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('422', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('423', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('424', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('425', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('426', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('427', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('428', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('429', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('430', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('431', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('432', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('433', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('434', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('435', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('436', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('437', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('438', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('439', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('440', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('441', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('442', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('443', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('444', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('445', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('446', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('447', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('448', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('449', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('450', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('451', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('452', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('453', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('454', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('455', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('456', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('457', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('458', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('459', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('460', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('461', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('462', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('463', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('464', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('465', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('466', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('467', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('468', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('469', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('470', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('471', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('472', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('473', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('474', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('475', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('476', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('477', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('478', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('479', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('480', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('481', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('482', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('483', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('484', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('485', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('486', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('487', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('488', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('489', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('490', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('491', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('492', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('493', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('494', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('495', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('496', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('497', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('498', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->throwErrorOn('499', ErrorType::init('4XX', VideoProfiles400ErrorException::class))
            ->type(VideoProfilesResponse2::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint retrieves the details of a video profile that has previously been created.
     *
     * @param string $profileId Profile id of the profile which needs to be retrieved.
     *
     * @return VideoProfilesResponse2 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getProfile(string $profileId): VideoProfilesResponse2
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/profiles/{profile_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('profile_id', $profileId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoProfiles400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoProfiles401ErrorException::class))
            ->type(VideoProfilesResponse2::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint removes a profile given its unique `profile_id`. The profile will be removed but video
     * assets created using the profile will remain as it is.
     *
     * @param string $profileId Profile id of the profile which needs to be deleted.
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteProfile(string $profileId): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/video/profiles/{profile_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('profile_id', $profileId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoProfiles400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoProfiles401ErrorException::class));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows users to update video collection that has previously been created.
     *
     * @param string $videoSourceId
     * @param VideoSourcesRequest1|null $body
     *
     * @return VideoSourcesResponse2 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateCollection(string $videoSourceId, ?VideoSourcesRequest1 $body = null): VideoSourcesResponse2
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/sources/{video_source_id}')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('video_source_id', $videoSourceId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoSources400ErrorException::class))
            ->type(VideoSourcesResponse2::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint get all the data of video collection that has previously been created.
     *
     * @param string $videoSourceId
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getCollection(string $videoSourceId): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/sources/{video_source_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('video_source_id', $videoSourceId));

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint removes a video collection given its unique asset id. All the asset in collection will
     * be removed from storage as well, associated URLs will be inaccessible.
     *
     * @param string $videoSourceId
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteCollection(string $videoSourceId): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/video/sources/{video_source_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('video_source_id', $videoSourceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoSources400Error3Exception::class));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param VideoPlaylistRequest|null $body
     *
     * @return VideoPlaylistResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createPlaylist(?VideoPlaylistRequest $body = null): VideoPlaylistResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/playlist')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoPlaylist400ErrorException::class))
            ->type(VideoPlaylistResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string|null $collectionId Video Collection ID
     *
     * @return VideoPlaylistResponse1[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAllPlaylists(?string $collectionId = null): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/playlist')
            ->auth('sec0')
            ->parameters(QueryParam::init('collection_id', $collectionId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoPlaylist400ErrorException::class))
            ->type(VideoPlaylistResponse1::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $playlistId
     * @param VideoPlaylistAssetRequest|null $body
     *
     * @return VideoPlaylistAssetResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function addAssetToPlaylist(
        string $playlistId,
        ?VideoPlaylistAssetRequest $body = null
    ): VideoPlaylistAssetResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/playlist/{playlist_id}/asset')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoPlaylistAsset400ErrorException::class))
            ->type(VideoPlaylistAssetResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $playlistId
     * @param VideoPlaylistAssetRequest1|null $body
     *
     * @return VideoPlaylistAssetResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function removeAssetFromPlaylist(
        string $playlistId,
        ?VideoPlaylistAssetRequest1 $body = null
    ): VideoPlaylistAssetResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/video/playlist/{playlist_id}/asset')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoPlaylistAsset400ErrorException::class))
            ->type(VideoPlaylistAssetResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $playlistId
     * @param VideoPlaylistRequest1|null $body
     *
     * @return VideoPlaylistResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updatePlaylist(string $playlistId, ?VideoPlaylistRequest1 $body = null): VideoPlaylistResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/playlist/{playlist_id}')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoPlaylist400Error3Exception::class))
            ->type(VideoPlaylistResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $playlistId
     * @param string|null $sortBy Optional, if sort_by is set to asset_title it will sorted by title
     *        name. Otherwise order in which user added the assets in playlist.
     * @param int|null $sortOrder -1 or 1
     * @param int|null $pageNumber Optional, Minimun 1
     * @param string|null $pageSize Optional, Minimun 10
     *
     * @return VideoPlaylistAssetsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPlaylistAssets(
        string $playlistId,
        ?string $sortBy = null,
        ?int $sortOrder = 1,
        ?int $pageNumber = 1,
        ?string $pageSize = '10'
    ): VideoPlaylistAssetsResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/playlist/{playlist_id}/assets')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('playlist_id', $playlistId),
                QueryParam::init('sort_by', $sortBy),
                QueryParam::init('sort_order', $sortOrder),
                QueryParam::init('page_number', $pageNumber),
                QueryParam::init('page_size', $pageSize)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoPlaylistAssets400ErrorException::class))
            ->type(VideoPlaylistAssetsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param OrgWebhooksRequest|null $body
     *
     * @return OrgWebhooksResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createWebhook(?OrgWebhooksRequest $body = null): OrgWebhooksResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/org/webhooks')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400'))
            ->type(OrgWebhooksResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $webhookId Unique identifier for the Gumlet Webhook which needs to be updated.
     * @param OrgWebhooksRequest1|null $body
     *
     * @return OrgWebhooksResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateWebhook(string $webhookId, ?OrgWebhooksRequest1 $body = null): OrgWebhooksResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/org/webhooks/{webhook_id}')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('webhook_id', $webhookId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400'))
            ->type(OrgWebhooksResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $webhookId Unique identifier for the Gumlet Webhook which needs to be deleted.
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteWebhook(string $webhookId): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/org/webhooks/{webhook_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('webhook_id', $webhookId));

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint retrieves metrics data to plot the chart.
     *
     * @param InsightsChartDataRequest|null $body
     *
     * @return InsightsChartDataResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function insightsChartData(?InsightsChartDataRequest $body = null): InsightsChartDataResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/insights/chart-data')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', InsightsChartData400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', InsightsChartData401ErrorException::class))
            ->type(InsightsChartDataResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint retrieves distribution data of a given breakdown value for a given metric.
     *
     * @param InsightsBreakdownDataRequest|null $body
     *
     * @return InsightsBreakdownDataResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function insightsBreakdownData(?InsightsBreakdownDataRequest $body = null): InsightsBreakdownDataResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/insights/breakdown-data')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', InsightsBreakdownData400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', InsightsBreakdownData401ErrorException::class))
            ->type(InsightsBreakdownDataResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint retrieves aggregated data of the given metrics.
     *
     * @param InsightsAggregatedDataRequest|null $body
     *
     * @return InsightsAggregatedDataResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function insightsAggregatedData(?InsightsAggregatedDataRequest $body = null): InsightsAggregatedDataResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/insights/aggregated-data')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', InsightsAggregatedData400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', InsightsAggregatedData401ErrorException::class))
            ->type(InsightsAggregatedDataResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows users to create image source.
     *
     * @param ImageSourcesRequest|null $body
     *
     * @return ImageSourcesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createImageSource(?ImageSourcesRequest $body = null): ImageSourcesResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/image/sources')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', ImageSources400ErrorException::class))
            ->type(ImageSourcesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint list image sources which are assigned to the user or token.
     *
     * @return ImageSourcesResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listSources(): ImageSourcesResponse1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/image/sources')->auth('sec0');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400'))
            ->type(ImageSourcesResponse1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows users to update image source that has previously been created.
     *
     * @param string $imageSourceId image source id which you want to update
     * @param ImageSourcesRequest1|null $body
     *
     * @return ImageSourcesResponse2 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateImageSource(string $imageSourceId, ?ImageSourcesRequest1 $body = null): ImageSourcesResponse2
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/image/sources/{image_source_id}')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('image_source_id', $imageSourceId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', ImageSources400ErrorException::class))
            ->type(ImageSourcesResponse2::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint removes a image source. All image delivery using this subdomain will be stopped.
     *
     * @param string $imageSourceId
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteSource(string $imageSourceId): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/image/sources/{image_source_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('image_source_id', $imageSourceId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', ImageSources400Error3Exception::class));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * You can purge cache for any image by using our cache purge API.
     *
     * @param string $subdomain Subdomain is same subdomain you created while creating source. If
     *        you serve image from example.gumlet.com, please enter only 'example' for this
     *        parameter.
     * @param PurgeRequest|null $body
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function purgeImageCache(string $subdomain, ?PurgeRequest $body = null)
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/purge/{subdomain}')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('subdomain', $subdomain),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint help you get analytics data.
     *
     * @param ImageAnalyticsRequest|null $body
     *
     * @return ImageAnalyticsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function imageAnalytics(?ImageAnalyticsRequest $body = null): ImageAnalyticsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/image/analytics')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', ImageAnalytics400ErrorException::class))
            ->type(ImageAnalyticsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * A live asset refers to a media content/video that is live-streamed through Gumlet. This endpoint
     * creates a live streaming asset allowing users to live stream a video that will be pushed to Gumlet.
     *
     * @param VideoLiveAssetsRequest|null $body
     *
     * @return VideoLiveAssetsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createLiveAsset(?VideoLiveAssetsRequest $body = null): VideoLiveAssetsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/live/assets')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoLiveAssets400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoLiveAssets401ErrorException::class))
            ->type(VideoLiveAssetsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * A live asset refers to a media content/video that is live-streamed through Gumlet. This endpoint
     * allows user to update a live streaming asset.
     *
     * @param VideoLiveAssetsUpdateRequest|null $body
     *
     * @return VideoLiveAssetsUpdateResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createLiveAssetCopy(?VideoLiveAssetsUpdateRequest $body = null): VideoLiveAssetsUpdateResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/live/assets/update')
            ->auth('sec0')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoLiveAssetsUpdate400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoLiveAssetsUpdate401ErrorException::class))
            ->type(VideoLiveAssetsUpdateResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint retrieves the details of a live video asset that has previously been created.
     *
     * @param string $liveAssetId An live asset id for the previously created asset.
     *
     * @return VideoLiveAssetsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getLiveAssetStatus(string $liveAssetId): VideoLiveAssetsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/live/assets/{live_asset_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('live_asset_id', $liveAssetId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoLiveAssets400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoLiveAssets401ErrorException::class))
            ->type(VideoLiveAssetsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint removes a live asset given its unique live asset id. The live asset will be removed
     * from storage as well, associated URLs will be inaccessible.
     *
     * @param string $liveAssetId Live asset id of the live asset which needs to be deleted.
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteLiveAsset(string $liveAssetId): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/video/live/assets/{live_asset_id}')
            ->auth('sec0')
            ->parameters(TemplateParam::init('live_asset_id', $liveAssetId));

        $_resHandler = $this->responseHandler()->throwErrorOn('400', ErrorType::init('400'));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows marking live assets complete. Once the live asset is marked complete, it can no
     * longer be used to ingest the live stream on Gumlet.
     *
     * @param string $liveAssetId Live asset id of the live stream which needs to be completed.
     *
     * @return array Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function completeLiveStream(string $liveAssetId): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/video/live/assets/{live_asset_id}/complete')
            ->auth('sec0')
            ->parameters(TemplateParam::init('live_asset_id', $liveAssetId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoLiveAssetsComplete400ErrorException::class));

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint lists live assets on the basis of `status` for the given `live_source_id`.
     *
     * @param string $liveSourceId Gumlet live source/collection id.
     * @param string|null $status To filter live assets on the basis of their current status. Can be
     *        specified as a single status value string or comma-separated status values. The
     *        status value can be one of `created`, `active`, `complete`, `disconnected`,
     *        `errored`, and `deleted`.
     * @param int|null $offset Offset value for a paginated list of assets.
     * @param int|null $size Page size for the paginated list.
     *
     * @return VideoLiveAssetsListResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function filterLiveAssets(
        string $liveSourceId,
        ?string $status = null,
        ?int $offset = null,
        ?int $size = null
    ): VideoLiveAssetsListResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/live/assets/list/{live_source_id}')
            ->auth('sec0')
            ->parameters(
                TemplateParam::init('live_source_id', $liveSourceId),
                QueryParam::init('status', $status),
                QueryParam::init('offset', $offset),
                QueryParam::init('size', $size)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoLiveAssetsList400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoLiveAssetsList401ErrorException::class))
            ->type(VideoLiveAssetsListResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint retrieves the history of a live video asset that has previously been created.
     *
     * @param string $liveAssetId An live asset id for the previously created asset.
     *
     * @return VideoLiveAssetsCOPYResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getLiveAssetStatusCopy(string $liveAssetId): VideoLiveAssetsCOPYResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/video/live/assets/{live_asset_id} (COPY)')
            ->auth('sec0')
            ->parameters(TemplateParam::init('live_asset_id', $liveAssetId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('400', VideoLiveAssetsCOPY400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('401', VideoLiveAssetsCOPY401ErrorException::class))
            ->type(VideoLiveAssetsCOPYResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
